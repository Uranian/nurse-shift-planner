// üìÑ src/pages/admin-users.jsx

import React, { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { supabase } from "../lib/supabaseClient";

export default function AdminUsers() {
  const [users, setUsers] = useState([]);
  const [hospitals, setHospitals] = useState([]);
  const [wards, setWards] = useState([]);
  const [search, setSearch] = useState("");

  const [newUser, setNewUser] = useState({
    username: "",
    email: "",
    password: "",
    phone: "",
    hospital_id: "",
    ward_id: "",
    shift_ward_id: "", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
    role: "customer",
    user_type: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
  });

  const [currentUser, setCurrentUser] = useState(null);

  const [editUser, setEditUser] = useState(null);

  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deletingUserId, setDeletingUserId] = useState(null);

  const [showAddUserForm, setShowAddUserForm] = useState(false);

  useEffect(() => {
    const stored = localStorage.getItem("logged_in_user");
    if (stored) {
      const parsed = JSON.parse(stored);
      setCurrentUser(parsed);
      fetchData(parsed); // ‚úÖ ‡∏™‡πà‡∏á currentUser ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
    } else {
      fetchData(null);
    }
  }, []);

  const fetchData = async (user) => {
    let query = supabase
      .from("profiles")
      .select(
        `
    id, username, email, phone, hospital_id, ward_id, shift_ward_id, role, user_type,
    hospitals(name),
    wards!profiles_ward_id_fkey(name),
    shift_wards:wards!profiles_shift_ward_id_fkey(name)
  `
      )
      .order("email", { ascending: true });

    if (user?.role === "admin") {
      // admin ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    } else if (user.user_type === "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•") {
      query = query.eq("hospital_id", user.hospital_id).neq("role", "admin");
    } else if (user.user_type === "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î") {
      query = query.eq("hospital_id", user.hospital_id).neq("role", "admin");
      if (user.ward_id) {
        query = query.eq("ward_id", user.ward_id);
      } else {
        query = query.is("ward_id", null);
      }
    } else {
      query = query.eq("id", user.id);
    }

    const { data: usersData, error } = await query;

    if (error) {
      console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", error.message, error.details);
    } else {
      console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", usersData.length, "‡∏Ñ‡∏ô");
    }

    setUsers(usersData || []);

    // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (admin ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î, customer ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    const hospitalQuery =
      user?.role === "admin"
        ? supabase.from("hospitals").select()
        : supabase.from("hospitals").select().eq("id", user.hospital_id);
    const { data: hospitalsData } = await hospitalQuery;
    setHospitals(hospitalsData || []);

    const wardQuery =
      user?.role === "admin"
        ? supabase.from("wards").select()
        : supabase.from("wards").select().eq("hospital_id", user.hospital_id);
    const { data: wardsData } = await wardQuery;
    setWards(wardsData || []);
  };

  const handleChange = (field, value) => {
    setNewUser((prev) => ({ ...prev, [field]: value }));
  };

  const handleAdd = async () => {
    if (!/^[0-9]{8}$/.test(newUser.password)) {
      toast.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å)");
      return;
    }

    if (
      !newUser.username ||
      !newUser.password ||
      !newUser.hospital_id ||
      !newUser.ward_id ||
      !newUser.user_type ||
      (currentUser?.role !== "admin" && !newUser.role)
    ) {
      toast.error(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å), ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•, ‡∏ß‡∏≠‡∏£‡πå‡∏î ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
      );
      return;
    }

    const payload = { ...newUser };
    if (currentUser?.role !== "admin") {
      delete payload.role; // ‚úÖ ‡∏•‡∏ö role ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin
    }

    await supabase.from("profiles").insert([payload]);
    setNewUser({
      username: "",
      email: "",
      password: "",
      phone: "",
      hospital_id: "",
      ward_id: "",
      shift_ward_id: "", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      role: "customer",
      user_type: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
    });
    fetchData(currentUser);
  };

  const handleUpdate = async () => {
    if (
      !editUser.username ||
      !editUser.hospital_id ||
      !editUser.ward_id ||
      !editUser.shift_ward_id
    )
      return;

    const updatedFields = {
      email: editUser.email,
      username: editUser.username,
      phone: editUser.phone,
      hospital_id: editUser.hospital_id,
      ward_id: editUser.ward_id,
      shift_ward_id: editUser.shift_ward_id, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      user_type: editUser.user_type,
      updated_at: new Date().toISOString(),
    };

    // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ role ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
    if (currentUser?.role === "admin") {
      updatedFields.role = editUser.role;
    }

    const { error } = await supabase
      .from("profiles")
      .update(updatedFields)
      .eq("id", editUser.id);

    if (error) {
      console.error("Update failed:", error);
    }

    setEditUser(null);
    fetchData(currentUser);
  };

  const handleDelete = (id) => {
    setDeletingUserId(id);
    setShowDeleteModal(true);
  };

  const confirmDelete = async () => {
    await supabase.from("profiles").delete().eq("id", deletingUserId);
    fetchData(currentUser);
    setShowDeleteModal(false);
    setDeletingUserId(null);
  };

  const filtered = users.filter((u) =>
    [u.email, u.username, u.phone].some((field) =>
      field?.toLowerCase().includes(search.toLowerCase())
    )
  );

  const filteredWardsForNewUser = wards.filter(
    (w) => w.hospital_id === newUser.hospital_id
  );

  const filteredWardsForEditUser = wards.filter(
    (w) => w.hospital_id === editUser?.hospital_id
  );

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-2">üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h1>

      {currentUser && (
        <p className="text-sm text-white mb-4">
          ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: <span className="font-semibold">{currentUser.username}</span>{" "}
          (<span className="italic">{currentUser.role}</span>
          {currentUser.user_type ? ` / ${currentUser.user_type}` : ""})
        </p>
      )}

      <input
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ email, username, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
        className="border px-2 py-1 mb-2 w-full"
      />

      {showAddUserForm && (
        <div className="mb-4 grid grid-cols-1 md:grid-cols-2 gap-4 bg-white text-black p-4 rounded">
          {/* Username */}
          <div>
            <label className="block font-semibold mb-1">üë§ Username</label>
            <input
              value={newUser.username}
              onChange={(e) => handleChange("username", e.target.value)}
              className="border px-2 py-1 w-full"
            />
          </div>

          {/* Password */}
          <div>
            <label className="block font-semibold mb-1">
              üîí ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 8 ‡∏´‡∏•‡∏±‡∏Å)
            </label>
            <input
              type="password"
              value={newUser.password}
              onChange={(e) => handleChange("password", e.target.value)}
              className="border px-2 py-1 w-full"
            />
          </div>

          {/* Email */}
          <div>
            <label className="block font-semibold mb-1">üìß Email</label>
            <input
              value={newUser.email}
              onChange={(e) => handleChange("email", e.target.value)}
              className="border px-2 py-1 w-full"
            />
          </div>

          {/* Phone */}
          <div>
            <label className="block font-semibold mb-1">üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
            <input
              value={newUser.phone}
              onChange={(e) => handleChange("phone", e.target.value)}
              className="border px-2 py-1 w-full"
            />
          </div>

          {/* Hospital */}
          <div>
            <label className="block font-semibold mb-1">üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</label>
            <select
              value={newUser.hospital_id}
              onChange={(e) => handleChange("hospital_id", e.target.value)}
              className="border px-2 py-1 w-full"
              disabled={currentUser?.role !== "admin"}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</option>
              {hospitals.map((h) => (
                <option key={h.id} value={h.id}>
                  {h.name}
                </option>
              ))}
            </select>
          </div>

          {/* Ward */}
          <div>
            <label className="block font-semibold mb-1">
              üè® ‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î
            </label>
            <select
              value={newUser.ward_id}
              onChange={(e) => handleChange("ward_id", e.target.value)}
              className="border px-2 py-1 w-full"
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏≠‡∏£‡πå‡∏î</option>
              {filteredWardsForNewUser.map((w) => (
                <option key={w.id} value={w.id}>
                  {w.name}
                </option>
              ))}
            </select>
          </div>

          {/* Shift Ward */}
          <div>
            <label className="block font-semibold mb-1">
              üìã ‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
            </label>
            <select
              value={newUser.shift_ward_id}
              onChange={(e) => handleChange("shift_ward_id", e.target.value)}
              className="border px-2 py-1 w-full"
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏≠‡∏£‡πå‡∏î</option>
              {filteredWardsForNewUser.map((w) => (
                <option key={w.id} value={w.id}>
                  {w.name}
                </option>
              ))}
            </select>
          </div>

          {/* User Type */}
          <div>
            <label className="block font-semibold mb-1">üë©‚Äç‚öïÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
            <select
              value={newUser.user_type}
              onChange={(e) => handleChange("user_type", e.target.value)}
              className="border px-2 py-1 w-full"
            >
              <option value="‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•">‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</option>
              <option value="‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î">‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î</option>
              <option value="‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•">‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</option>
              <option value="‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ">‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ</option>
              <option value="‡∏Ñ‡∏ô‡∏á‡∏≤‡∏ô">‡∏Ñ‡∏ô‡∏á‡∏≤‡∏ô</option>
            </select>
          </div>

          {/* Role (admin only) */}
          {currentUser?.role === "admin" && (
            <div>
              <label className="block font-semibold mb-1">üõ†Ô∏è ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏£‡∏∞‡∏ö‡∏ö</label>
              <select
                value={newUser.role}
                onChange={(e) => handleChange("role", e.target.value)}
                className="border px-2 py-1 w-full"
              >
                <option value="customer">customer</option>
                <option value="admin">admin</option>
              </select>
            </div>
          )}
        </div>
      )}

      {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å */}
      <div className="flex gap-2 mb-4">
        <button
          onClick={() => {
            if (showAddUserForm) {
              handleAdd();
              setShowAddUserForm(false);
            } else {
              setNewUser((prev) => ({
                ...prev,
                hospital_id: currentUser?.hospital_id || "", // ‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
              }));
              setShowAddUserForm(true);
            }
          }}
          className="bg-green-600 text-white px-3 py-1 rounded"
        >
          {showAddUserForm ? "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}
        </button>

        {showAddUserForm && (
          <button
            onClick={() => {
              // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              setShowAddUserForm(false);
              setNewUser({
                username: "",
                email: "",
                password: "",
                phone: "",
                hospital_id: "",
                ward_id: "",
                shift_ward_id: "",
                role: "customer",
                user_type: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
              });
            }}
            className="bg-gray-400 text-black px-4 py-2 rounded"
          >
            ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        )}
      </div>

      {editUser && (
        <div className="mb-4 border p-4 bg-gray-200 rounded text-black">
          <h2 className="text-lg font-semibold mb-4 text-black">
            ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Username */}
            <div>
              <label className="block font-semibold mb-1">üë§ Username</label>
              <input
                value={editUser.username || ""}
                onChange={(e) =>
                  setEditUser({ ...editUser, username: e.target.value })
                }
                className="border px-2 py-1 w-full"
              />
            </div>

            {/* Email */}
            <div>
              <label className="block font-semibold mb-1">üìß Email</label>
              <input
                value={editUser.email || ""}
                onChange={(e) =>
                  setEditUser({ ...editUser, email: e.target.value })
                }
                className="border px-2 py-1 w-full"
              />
            </div>

            {/* Phone */}
            <div>
              <label className="block font-semibold mb-1">üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
              <input
                value={editUser.phone || ""}
                onChange={(e) =>
                  setEditUser({ ...editUser, phone: e.target.value })
                }
                className="border px-2 py-1 w-full"
              />
            </div>

            {/* Hospital */}
            <div>
              <label className="block font-semibold mb-1">üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</label>
              <select
                value={editUser.hospital_id}
                onChange={(e) =>
                  setEditUser({ ...editUser, hospital_id: e.target.value })
                }
                className="border px-2 py-1 w-full"
                disabled={currentUser?.role !== "admin"}
              >
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</option>
                {hospitals.map((h) => (
                  <option key={h.id} value={h.id}>
                    {h.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Ward */}
            <div>
              <label className="block font-semibold mb-1">
                üè® ‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î
              </label>
              <select
                value={editUser.ward_id}
                onChange={(e) =>
                  setEditUser({ ...editUser, ward_id: e.target.value })
                }
                className="border px-2 py-1 w-full"
                disabled={
                  !(
                    currentUser?.role === "admin" ||
                    currentUser?.role === "customer-admin"
                  )
                }
              >
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏≠‡∏£‡πå‡∏î</option>
                {filteredWardsForEditUser.map((w) => (
                  <option key={w.id} value={w.id}>
                    {w.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Shift Ward */}
            <div>
              <label className="block font-semibold mb-1">
                üìã ‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
              </label>
              <select
                value={editUser.shift_ward_id}
                onChange={(e) =>
                  setEditUser({ ...editUser, shift_ward_id: e.target.value })
                }
                className="border px-2 py-1 w-full"
                disabled={
                  !(
                    currentUser?.role === "admin" ||
                    currentUser?.role === "customer-admin"
                  )
                }
              >
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏≠‡∏£‡πå‡∏î</option>
                {filteredWardsForEditUser.map((w) => (
                  <option key={w.id} value={w.id}>
                    {w.name}
                  </option>
                ))}
              </select>
            </div>

            {/* User Type */}
            <div>
              <label className="block font-semibold mb-1">
                üë©‚Äç‚öïÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
              </label>
              <select
                value={editUser.user_type}
                onChange={(e) =>
                  setEditUser({ ...editUser, user_type: e.target.value })
                }
                className="border px-2 py-1 w-full"
              >
                <option value="‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•">‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</option>
                <option value="‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î">‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î</option>
                <option value="‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•">‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</option>
                <option value="‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ">‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ</option>
                <option value="‡∏Ñ‡∏ô‡∏á‡∏≤‡∏ô">‡∏Ñ‡∏ô‡∏á‡∏≤‡∏ô</option>
              </select>
            </div>

            {/* Role (admin only) */}
            {currentUser?.role === "admin" && (
              <div>
                <label className="block font-semibold mb-1">
                  üõ†Ô∏è ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏£‡∏∞‡∏ö‡∏ö
                </label>
                <select
                  value={editUser.role}
                  onChange={(e) =>
                    setEditUser({ ...editUser, role: e.target.value })
                  }
                  className="border px-2 py-1 w-full"
                >
                  <option value="customer">customer</option>
                  <option value="admin">admin</option>
                </select>
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="mt-4 flex gap-4">
            <button
              onClick={handleUpdate}
              className="bg-blue-600 text-white px-4 py-2 rounded"
            >
              üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            </button>
            <button
              onClick={() => setEditUser(null)}
              className="text-gray-600 underline"
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
          </div>
        </div>
      )}

      <table className="table-auto w-full border-collapse">
        <thead>
          <tr>
            <th className="border px-2 py-1">Username</th>
            <th className="border px-2 py-1">Email</th>
            <th className="border px-2 py-1">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
            <th className="border px-2 py-1">‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</th>
            <th className="border px-2 py-1">‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î</th>
            <th className="border px-2 py-1">‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£</th>
            <th className="border px-2 py-1">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
            {currentUser?.role === "admin" && (
              <th className="border px-2 py-1">Role</th>
            )}

            <th className="border px-2 py-1">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {filtered.map((user) => (
            <tr key={user.id}>
              <td className="border px-2 py-1">{user.username || "-"}</td>
              <td className="border px-2 py-1">{user.email}</td>
              <td className="border px-2 py-1">{user.phone || "-"}</td>
              <td className="border px-2 py-1">
                {user.hospitals?.name || "-"}
              </td>
              <td className="border px-2 py-1">{user.wards?.name || "-"}</td>
              <td className="border px-2 py-1">
                {
                  wards.find((w) => w.id === user.shift_ward_id)?.name || "-" // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£
                }
              </td>

              <td className="border px-2 py-1">{user.user_type || "-"}</td>
              {currentUser?.role === "admin" && (
                <td className="border px-2 py-1">{user.role}</td>
              )}

              <td className="border px-2 py-1">
                <button
                  onClick={() => setEditUser(user)}
                  className="text-blue-600 hover:underline mr-2"
                >
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
                <button
                  onClick={() => handleDelete(user.id)}
                  className="text-red-500 hover:underline"
                >
                  ‡∏•‡∏ö
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {showDeleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl w-[90%] max-w-sm">
            <h2 className="text-xl font-semibold mb-4 text-center text-black">
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </h2>
            <p className="text-center mb-6 text-black">
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ?
            </p>
            <div className="flex justify-center gap-4">
              <button
                onClick={confirmDelete}
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded"
              >
                ‡∏•‡∏ö
              </button>
              <button
                onClick={() => setShowDeleteModal(false)}
                className="bg-gray-300 hover:bg-gray-400 text-black px-4 py-2 rounded"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
