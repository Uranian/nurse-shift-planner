// üìÑ pages/admin-wards.jsx

import React, { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { supabase } from "../lib/supabaseClient";

/* =======================
   üìã  ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà / helper
   ======================= */
const TH_MONTHS = [
  "‡∏°.‡∏Ñ.",
  "‡∏Å.‡∏û.",
  "‡∏°‡∏µ.‡∏Ñ.",
  "‡πÄ‡∏°.‡∏¢.",
  "‡∏û.‡∏Ñ.",
  "‡∏°‡∏¥.‡∏¢.",
  "‡∏Å.‡∏Ñ.",
  "‡∏™.‡∏Ñ.",
  "‡∏Å.‡∏¢.",
  "‡∏ï.‡∏Ñ.",
  "‡∏û.‡∏¢.",
  "‡∏ò.‡∏Ñ.",
];

/* =======================
   üè•  AdminWards component
   ======================= */
export default function AdminWards() {
  /* ----- state ‡∏´‡∏•‡∏±‡∏Å ----- */
  const [wards, setWards] = useState([]);
  const [hospitals, setHospitals] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);

  /* ----- state ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏≠‡∏£‡πå‡∏î ----- */
  const [newWardName, setNewWardName] = useState("");
  const [selectedHospitalId, setSelectedHospitalId] = useState("");
  const [newMaxMorning, setNewMaxMorning] = useState(4);
  const [newMaxEvening, setNewMaxEvening] = useState(3);
  const [newMaxNight, setNewMaxNight] = useState(3);
  const [newNoE2N, setNewNoE2N] = useState(true); // ‡∏´‡πâ‡∏≤‡∏°‡∏ö‡πà‡∏≤‡∏¢‚Üí‡∏î‡∏∂‡∏Å
  const [newNoN2M, setNewNoN2M] = useState(true); // ‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏∂‡∏Å‚Üí‡πÄ‡∏ä‡πâ‡∏≤
  const [newMonthRestDays, setNewMonthRestDays] = useState(Array(12).fill(8));

  /* ----- state ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏≠‡∏£‡πå‡∏î ----- */
  const [editingId, setEditingId] = useState(null);
  const [editingName, setEditingName] = useState("");
  const [editingHospitalId, setEditingHospitalId] = useState("");
  const [editMaxMorning, setEditMaxMorning] = useState(4);
  const [editMaxEvening, setEditMaxEvening] = useState(3);
  const [editMaxNight, setEditMaxNight] = useState(3);
  const [editNoE2N, setEditNoE2N] = useState(true);
  const [editNoN2M, setEditNoN2M] = useState(true);
  const [editMonthRestDays, setEditMonthRestDays] = useState(Array(12).fill(0));

  /* ----- misc ----- */
  const [searchTerm, setSearchTerm] = useState("");
  const [showConfirm, setShowConfirm] = useState(false);
  const [deletingWardId, setDeletingWardId] = useState(null);

  /* =======================
     üîÑ  ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
     ======================= */
  useEffect(() => {
    const stored = localStorage.getItem("logged_in_user");
    if (stored) setCurrentUser(JSON.parse(stored));
  }, []);

  useEffect(() => {
    if (!currentUser) return;
    fetchHospitals();
  }, [currentUser]);

  const fetchHospitals = async () => {
    if (!currentUser) return;
    let q = supabase.from("hospitals").select("id, name").order("name");
    if (currentUser.role !== "admin") q = q.eq("id", currentUser.hospital_id);

    const { data, error } = await q;
    if (error) toast.error("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    else {
      setHospitals(data);
      if (!selectedHospitalId && data.length === 1)
        setSelectedHospitalId(data[0].id);
    }
  };

  useEffect(() => {
    fetchWards();
  }, [selectedHospitalId]);

  const fetchWards = async () => {
    const { data, error } = await supabase
      .from("wards")
      .select(
        `
        id, name, hospital_id,
        max_morning_shift_per_day,
        max_evening_shift_per_day,
        max_night_shift_per_day,
        rule_no_evening_to_night,
        rule_no_night_to_morning,
        month_rest_days,
        hospitals!fk_wards_hospital ( name )
      `
      )
      .order("name");

    if (error) toast.error("‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    else {
      setWards(
        data.map((w) => ({
          ...w,
          hospital_name: w.hospitals?.name || "",
          month_rest_days: w.month_rest_days || Array(12).fill(0),
        }))
      );
    }
  };

  /* =======================
     ‚ûï  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏≠‡∏£‡πå‡∏î
     ======================= */
  const addWard = async () => {
    if (!newWardName.trim() || !selectedHospitalId) {
      toast.warn("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•");
      return;
    }
    const { error } = await supabase.from("wards").insert({
      name: newWardName.trim(),
      hospital_id: selectedHospitalId,
      max_morning_shift_per_day: newMaxMorning,
      max_evening_shift_per_day: newMaxEvening,
      max_night_shift_per_day: newMaxNight,
      rule_no_evening_to_night: newNoE2N,
      rule_no_night_to_morning: newNoN2M,
      month_rest_days: newMonthRestDays,
    });
    if (error) toast.error("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    else {
      toast.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß");
      /* reset */
      setNewWardName("");
      setSelectedHospitalId("");
      setNewMonthRestDays(Array(12).fill(8));
      fetchWards();
    }
  };

  /* =======================
     ‚úèÔ∏è   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏≠‡∏£‡πå‡∏î
     ======================= */
  const updateWard = async (id) => {
    const { error } = await supabase
      .from("wards")
      .update({
        name: editingName.trim(),
        hospital_id: editingHospitalId,
        max_morning_shift_per_day: editMaxMorning,
        max_evening_shift_per_day: editMaxEvening,
        max_night_shift_per_day: editMaxNight,
        rule_no_evening_to_night: editNoE2N,
        rule_no_night_to_morning: editNoN2M,
        month_rest_days: editMonthRestDays,
      })
      .eq("id", id);

    if (error) toast.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    else {
      toast.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setEditingId(null);
      fetchWards();
    }
  };

  /* =======================
     üóë  ‡∏•‡∏ö‡∏ß‡∏≠‡∏£‡πå‡∏î
     ======================= */
  const deleteWardConfirmed = async () => {
    const { error } = await supabase
      .from("wards")
      .delete()
      .eq("id", deletingWardId);
    if (error) toast.error("‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    else {
      toast.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
      fetchWards();
    }
    setShowConfirm(false);
    setDeletingWardId(null);
  };

  /* =======================
     üîç  filter table rows
     ======================= */
  const filtered = wards.filter(
    (w) =>
      w.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      w.hospital_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  /* =======================
        üåê  UI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     ======================= */
  return (
    <div className="p-4 max-w-5xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">üè• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏≠‡∏£‡πå‡∏î</h1>

      {/* ===== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ===== */}
      <input
        className="border px-2 py-1 mb-4 w-full max-w-xs"
        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />

      {/* ===== ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏≠‡∏£‡πå‡∏î ===== */}
      <div className="border rounded p-4 mb-6">
        <h2 className="font-semibold mb-2">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏≠‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà</h2>
        <div className="flex flex-wrap gap-2 items-center">
          {/* ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• */}
          <select
            value={selectedHospitalId}
            onChange={(e) => setSelectedHospitalId(e.target.value)}
            className="border px-2 py-1"
          >
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</option>
            {hospitals.map((h) => (
              <option key={h.id} value={h.id}>
                {h.name}
              </option>
            ))}
          </select>

          {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≠‡∏£‡πå‡∏î */}
          <input
            className="border px-2 py-1"
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≠‡∏£‡πå‡∏î"
            value={newWardName}
            onChange={(e) => setNewWardName(e.target.value)}
          />

          {/* quota */}
          <input
            className="border px-1 w-16"
            type="number"
            value={newMaxMorning}
            onChange={(e) => setNewMaxMorning(Number(e.target.value))}
            placeholder="‡πÄ‡∏ä‡πâ‡∏≤"
          />
          <input
            className="border px-1 w-16"
            type="number"
            value={newMaxEvening}
            onChange={(e) => setNewMaxEvening(Number(e.target.value))}
            placeholder="‡∏ö‡πà‡∏≤‡∏¢"
          />
          <input
            className="border px-1 w-16"
            type="number"
            value={newMaxNight}
            onChange={(e) => setNewMaxNight(Number(e.target.value))}
            placeholder="‡∏î‡∏∂‡∏Å"
          />

          {/* rule checkbox */}
          <label className="flex items-center gap-1">
            <input
              type="checkbox"
              checked={newNoE2N}
              onChange={(e) => setNewNoE2N(e.target.checked)}
            />
            ‚ùå‡∏ö‚Üí‡∏î
          </label>
          <label className="flex items-center gap-1">
            <input
              type="checkbox"
              checked={newNoN2M}
              onChange={(e) => setNewNoN2M(e.target.checked)}
            />
            ‚ùå‡∏î‚Üí‡∏ä
          </label>

          {/* ‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (input 12 ‡∏ä‡πà‡∏≠‡∏á) */}
          <div className="flex flex-wrap gap-1 items-center">
            {TH_MONTHS.map((m, idx) => (
              <input
                key={idx}
                title={`‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${m}`}
                className="border px-1 w-12 text-center"
                type="number"
                min={0}
                value={newMonthRestDays[idx]}
                onChange={(e) => {
                  const arr = [...newMonthRestDays];
                  arr[idx] = Math.max(0, Number(e.target.value));
                  setNewMonthRestDays(arr);
                }}
              />
            ))}
          </div>

          <button
            onClick={addWard}
            className="bg-green-600 text-white px-3 py-1 rounded"
          >
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
        </div>
      </div>

      {/* ===== ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≠‡∏£‡πå‡∏î ===== */}
      <table className="table-auto border-collapse w-full text-sm">
        <thead>
          <tr className="bg-gray-100 text-black">
            <th className="border px-2 py-1">‡∏ß‡∏≠‡∏£‡πå‡∏î</th>
            <th className="border px-2 py-1">‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</th>
            <th className="border px-2 py-1">‡πÄ‡∏ä‡πâ‡∏≤</th>
            <th className="border px-2 py-1">‡∏ö‡πà‡∏≤‡∏¢</th>
            <th className="border px-2 py-1">‡∏î‡∏∂‡∏Å</th>
            <th className="border px-2 py-1">‚ùå‡∏ö‚Üí‡∏î</th>
            <th className="border px-2 py-1">‚ùå‡∏î‚Üí‡∏ä</th>
            <th className="border px-2 py-1">‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</th>
            <th className="border px-2 py-1">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {filtered.map((w) => (
            <tr key={w.id}>
              {/* ---------- ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≠‡∏£‡πå‡∏î ---------- */}
              <td className="border px-2 py-1">
                {editingId === w.id ? (
                  <input
                    className="border px-1 w-full bg-gray-800 text-white"
                    value={editingName}
                    onChange={(e) => setEditingName(e.target.value)}
                  />
                ) : (
                  w.name
                )}
              </td>

              {/* ---------- ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ---------- */}
              <td className="border px-2 py-1">
                {editingId === w.id ? (
                  <select
                    className="border px-1 bg-gray-800 text-white w-full"
                    value={editingHospitalId}
                    onChange={(e) => setEditingHospitalId(e.target.value)}
                  >
                    {hospitals.map((h) => (
                      <option key={h.id} value={h.id}>
                        {h.name}
                      </option>
                    ))}
                  </select>
                ) : (
                  w.hospital_name
                )}
              </td>

              {/* ---------- quota ---------- */}
              {["Morning", "Evening", "Night"].map((label, i) => (
                <td key={i} className="border px-2 py-1 text-center">
                  {editingId === w.id ? (
                    <input
                      className="border px-1 w-16 text-white"
                      type="number"
                      value={[editMaxMorning, editMaxEvening, editMaxNight][i]}
                      onChange={(e) => {
                        const v = Math.max(0, Number(e.target.value));
                        if (i === 0) setEditMaxMorning(v);
                        if (i === 1) setEditMaxEvening(v);
                        if (i === 2) setEditMaxNight(v);
                      }}
                    />
                  ) : (
                    [
                      w.max_morning_shift_per_day,
                      w.max_evening_shift_per_day,
                      w.max_night_shift_per_day,
                    ][i]
                  )}
                </td>
              ))}

              {/* ---------- rules ---------- */}
              <td className="border px-2 py-1 text-center">
                {editingId === w.id ? (
                  <input
                    type="checkbox"
                    checked={editNoE2N}
                    onChange={(e) => setEditNoE2N(e.target.checked)}
                  />
                ) : w.rule_no_evening_to_night ? (
                  "‚úÖ"
                ) : (
                  "‚ùå"
                )}
              </td>
              <td className="border px-2 py-1 text-center">
                {editingId === w.id ? (
                  <input
                    type="checkbox"
                    checked={editNoN2M}
                    onChange={(e) => setEditNoN2M(e.target.checked)}
                  />
                ) : w.rule_no_night_to_morning ? (
                  "‚úÖ"
                ) : (
                  "‚ùå"
                )}
              </td>

              {/* ---------- rest days array ---------- */}
              <td className="border px-2 py-1 text-center whitespace-nowrap">
                {editingId === w.id ? (
                  <div className="flex flex-wrap gap-1">
                    {TH_MONTHS.map((m, idx) => (
                      <input
                        key={idx}
                        title={m}
                        className="border px-1 w-12 text-center text-white"
                        type="number"
                        min={0}
                        value={editMonthRestDays[idx] || 0}
                        onChange={(e) => {
                          const arr = [...editMonthRestDays];
                          arr[idx] = Math.max(0, Number(e.target.value));
                          setEditMonthRestDays(arr);
                        }}
                      />
                    ))}
                  </div>
                ) : (
                  w.month_rest_days.join(", ")
                )}
              </td>

              {/* ---------- action buttons ---------- */}
              <td className="border px-2 py-1 whitespace-nowrap">
                {editingId === w.id ? (
                  <>
                    <button
                      onClick={() => updateWard(w.id)}
                      className="bg-blue-600 text-white px-2 py-1 rounded mr-1"
                    >
                      ‚úÖ
                    </button>
                    <button
                      onClick={() => setEditingId(null)}
                      className="text-gray-600"
                    >
                      ‚úñ
                    </button>
                  </>
                ) : (
                  <>
                    <button
                      onClick={() => {
                        setEditingId(w.id);
                        setEditingName(w.name);
                        setEditingHospitalId(w.hospital_id);
                        setEditMaxMorning(w.max_morning_shift_per_day);
                        setEditMaxEvening(w.max_evening_shift_per_day);
                        setEditMaxNight(w.max_night_shift_per_day);
                        setEditNoE2N(!!w.rule_no_evening_to_night);
                        setEditNoN2M(!!w.rule_no_night_to_morning);
                        setEditMonthRestDays(w.month_rest_days);
                      }}
                      className="text-blue-600 mr-2"
                    >
                      ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </button>
                    <button
                      onClick={() => {
                        setDeletingWardId(w.id);
                        setShowConfirm(true);
                      }}
                      className="text-red-600"
                    >
                      ‡∏•‡∏ö
                    </button>
                  </>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* ===== modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö ===== */}
      {showConfirm && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50">
          <div className="bg-white rounded p-6 w-80 text-center">
            <h2 className="font-semibold text-lg mb-4 text-black">
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            </h2>
            <p className="mb-6 text-black">‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ?</p>
            <div className="flex justify-center gap-4">
              <button
                onClick={deleteWardConfirmed}
                className="bg-red-600 text-white px-4 py-2 rounded"
              >
                ‡∏•‡∏ö
              </button>
              <button
                onClick={() => setShowConfirm(false)}
                className="bg-gray-300 px-4 py-2 rounded"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
