// üìÑ src/pages/consultant-availability.jsx

import React, { useState, useEffect } from "react";
import { supabase } from "../lib/supabaseClient";
import { toast } from "react-toastify";
import dayjs from "dayjs";

export default function ConsultantAvailabilityPage() {
  const [currentUser, setCurrentUser] = useState(null);
  const [date, setDate] = useState(dayjs().format("YYYY-MM-DD"));
  const [startTime, setStartTime] = useState("09:00");
  const [endTime, setEndTime] = useState("12:00");
  const [slotDuration, setSlotDuration] = useState(60); // ‡∏ô‡∏≤‡∏ó‡∏µ
  const [price, setPrice] = useState(500);
  const [availabilityList, setAvailabilityList] = useState([]);

  useEffect(() => {
    const stored = localStorage.getItem("logged_in_user");
    if (stored) {
      const user = JSON.parse(stored);
      if (user.user_type === "‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤") {
        setCurrentUser(user);
        fetchAvailability(user);
      } else {
        toast.error("‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ");
      }
    }
  }, []);

  const fetchAvailability = async (user) => {
    const { data, error } = await supabase
      .from("consultant_availability")
      .select("*")
      .eq("user_id", user.id)
      .order("date", { ascending: true });

    if (error) {
      toast.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      setAvailabilityList(data);
    }
  };

  const handleAddAvailability = async () => {
    if (!startTime || !endTime || !price || !slotDuration) return;

    const payload = {
      user_id: currentUser.id,
      date,
      start_time: startTime,
      end_time: endTime,
      slot_duration: parseInt(slotDuration),
      price: parseInt(price),
    };

    const { error } = await supabase
      .from("consultant_availability")
      .insert([payload]);

    if (error) {
      toast.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      fetchAvailability(currentUser);
    }
  };

  return (
    <div className="p-6 max-w-xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">üìÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á</h1>

      <div className="space-y-4">
        <div>
          <label>üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
          <input type="date" className="border p-1 w-full" value={date} onChange={(e) => setDate(e.target.value)} />
        </div>

        <div className="flex gap-4">
          <div className="flex-1">
            <label>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
            <input type="time" className="border p-1 w-full" value={startTime} onChange={(e) => setStartTime(e.target.value)} />
          </div>
          <div className="flex-1">
            <label>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
            <input type="time" className="border p-1 w-full" value={endTime} onChange={(e) => setEndTime(e.target.value)} />
          </div>
        </div>

        <div className="flex gap-4">
          <div className="flex-1">
            <label>‚è≥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏•‡πá‡∏≠‡∏ï (‡∏ô‡∏≤‡∏ó‡∏µ)</label>
            <select className="border p-1 w-full" value={slotDuration} onChange={(e) => setSlotDuration(e.target.value)}>
              <option value={30}>30 ‡∏ô‡∏≤‡∏ó‡∏µ</option>
              <option value={60}>1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</option>
              <option value={90}>1.5 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</option>
              <option value={120}>2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</option>
            </select>
          </div>

          <div className="flex-1">
            <label>üí∞ ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏ö‡∏≤‡∏ó)</label>
            <input type="number" className="border p-1 w-full" value={price} onChange={(e) => setPrice(e.target.value)} />
          </div>
        </div>

        <button onClick={handleAddAvailability} className="bg-green-600 text-white px-4 py-2 rounded">
          ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á
        </button>

        <hr className="my-4" />

        <h2 className="text-lg font-bold">üìñ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ</h2>
        <ul className="space-y-2">
          {availabilityList.map((item) => (
            <li key={item.id} className="border rounded p-2">
              {item.date} ‡πÄ‡∏ß‡∏•‡∏≤ {item.start_time} - {item.end_time} | {item.slot_duration} ‡∏ô‡∏≤‡∏ó‡∏µ | {item.price} ‡∏ö‡∏≤‡∏ó
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}
