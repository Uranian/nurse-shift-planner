// üìÑ src/pages/shift-planner.jsx

import React, { useState, useEffect, useRef } from "react"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useRef
import dayjs from "dayjs";
import { supabase } from "../lib/supabaseClient";
import NoSSR from "../components/NoSSR";
import Link from "next/link";
import { toast } from "react-toastify";
import Swal from "sweetalert2";
import { useRouter } from "next/router";
import * as XLSX from "xlsx";
import {
  DEFAULT_HOSPITAL_ID,
  DEFAULT_WARD_ID,
  DEFAULT_HOSPITAL_NAME,
  DEFAULT_WARD_NAME,
} from "../config";
import "dayjs/locale/th";
dayjs.locale("th");

// üëá Merge assignments ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function mergeAssignmentsPreserveDays(
  oldAssign,
  newAssign,
  preserveDays = [1, 2]
) {
  const merged = { ...newAssign };
  Object.keys(oldAssign).forEach((nurseId) => {
    if (!merged[nurseId]) merged[nurseId] = {};
    preserveDays.forEach((day) => {
      if (oldAssign[nurseId]?.[day]) {
        // Copy shift-level detail (‡πÄ‡∏ä‡πâ‡∏≤/‡∏ö‡πà‡∏≤‡∏¢/‡∏î‡∏∂‡∏Å) ‡∏à‡∏≤‡∏Å oldAssign ‡∏°‡∏≤‡∏ó‡∏±‡∏ö‡∏ó‡∏∏‡∏Å shift ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        merged[nurseId][day] = { ...oldAssign[nurseId][day] };
      }
    });
  });
  return merged;
}
function markHolidaysDisabled(assignments, nurseHolidays, year, month) {
  const daysInMonth = dayjs(`${year}-${month}-01`).daysInMonth();
  const yearMonth = dayjs(`${year}-${month}-01`).format("YYYY-MM");
  for (const nurseId of Object.keys(assignments)) {
    for (let d = 1; d <= daysInMonth; d++) {
      const dateStr = `${yearMonth}-${String(d).padStart(2, "0")}`;
      const isHoliday =
        nurseHolidays?.[nurseId]?.has?.(dateStr) ||
        (Array.isArray(nurseHolidays?.[nurseId]) &&
          nurseHolidays[nurseId].includes(dateStr));
      if (isHoliday) {
        if (!assignments[nurseId][d]) assignments[nurseId][d] = {};
        for (const s of ["morning", "evening", "night"]) {
          assignments[nurseId][d][s] = {
            ...(assignments[nurseId][d][s] || {}),
            value: false,
            disabled: true,
            reason: "‡∏•‡∏≤‡∏á‡∏≤‡∏ô",
          };
        }
      }
    }
  }
  return assignments;
}

const shifts = ["morning", "evening", "night"];
const shiftLabels = {
  morning: "‡πÄ‡∏ä‡πâ‡∏≤",
  evening: "‡∏ö‡πà‡∏≤‡∏¢",
  night: "‡∏î‡∏∂‡∏Å",
};

const currentYear = dayjs().year();
const currentMonth = dayjs().month() + 1;

function ShiftPlanner() {
  const router = useRouter();
  const [assignments, setAssignments] = useState({});
  const [year, setYear] = useState(currentYear);
  const [month, setMonth] = useState(currentMonth);
  const [statusMessage, setStatusMessage] = useState("");

  const [showConfirm, setShowConfirm] = useState(false);
  const handleConfirmClear = () => {
    // setAssignments({});
    setAssignments({ __placeholder__: true }); // üëà ‡∏ó‡∏≥‡πÉ‡∏´‡πâ length > 0
    setStatusMessage("üóë ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)");
    setShowConfirm(false);
    setSummaryText(""); // üßº ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£
    setCleared(false); // üëà ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
    setEditingPlan(true); // üëà ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ
    setRefPlan(null); // ‚úÖ ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà" ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  };

  const [planId, setPlanId] = useState(null);
  const [planList, setPlanList] = useState([]);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [shiftPlanName, setShiftPlanName] = useState("");

  const [editingPlan, setEditingPlan] = useState(false);
  const [refPlan, setRefPlan] = useState(null); // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÄ‡∏Å‡πà‡∏≤
  const [disableSave, setDisableSave] = useState(false); // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

  const daysInMonth = dayjs(`${year}-${month}-01`).daysInMonth();
  const yearMonth = dayjs(`${year}-${month}-01`).format("YYYY-MM");

  const [nurseList, setNurseList] = useState([]);
  const [nurseMap, setNurseMap] = useState({});

  const [hospitalId, setHospitalId] = useState(null);
  const [nurseHolidays, setNurseHolidays] = useState({});

  const [wardId, setWardId] = useState(null);
  const [hospitalName, setHospitalName] = useState("");
  const [wardName, setWardName] = useState("");

  const [currentUser, setCurrentUser] = useState(null);

  const lastWarnings = useRef(new Set());
  const [userShiftWardID, setUserShiftWardID] = useState("");
  const [userHospitalID, setUserHospitalID] = useState("");
  const [showReset, setShowReset] = useState(true);
  const [selectedHospitalId, setSelectedHospitalId] = useState(
    userHospitalID || ""
  );
  const [selectedWardId, setSelectedWardId] = useState(userShiftWardID || "");

  const [allHospitals, setAllHospitals] = useState([]);
  const [allWards, setAllWards] = useState([]);
  const [userRole, setUserRole] = useState("");

  const [isHospitalLocked, setIsHospitalLocked] = useState(true);
  const [isWardLocked, setIsWardLocked] = useState(true);

  const [wardConfig, setWardConfig] = useState(null);

  const [existingPlans, setExistingPlans] = useState([]);

  const [showEditShiftModal, setShowEditShiftModal] = useState(false);

  const [summaryText, setSummaryText] = useState("");

  const [viewingPlan, setViewingPlan] = useState(null); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π
  const [viewingAssignments, setViewingAssignments] = useState({});

  // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£
  const [editingShiftId, setEditingShiftId] = useState(null);
  const [isOt, setIsOt] = useState(false);
  const [replacementNurseId, setReplacementNurseId] = useState("");
  const [note, setNote] = useState("");
  const [showEditModal, setShowEditModal] = useState(false);

  const [editShiftDetail, setEditShiftDetail] = useState(null);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ setYear/setMonth ‡πÉ‡∏´‡πâ save ‡∏•‡∏á localStorage ‡∏î‡πâ‡∏ß‡∏¢
  const setYearAndSave = (newYear) => {
    setYear(newYear);
    localStorage.setItem(
      "shift_plan_year_month",
      JSON.stringify({ year: newYear, month })
    );
  };
  const setMonthAndSave = (newMonth) => {
    setMonth(newMonth);
    localStorage.setItem(
      "shift_plan_year_month",
      JSON.stringify({ year, month: newMonth })
    );
  };

  const [cleared, setCleared] = useState(false);

  // üëá ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ id (‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Supabase)
  const openEditShiftFromDatabase = async (shiftId) => {
    console.log("üîç ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", shiftId);
    const { data, error } = await supabase
      .from("nurse_shifts")
      .select("is_ot, replacement_nurse_id, note")
      .eq("id", shiftId)
      .single();

    if (error || !data) {
      toast.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      return;
    }

    setEditingShiftId(shiftId);
    setIsOt(data.is_ot || false);
    setReplacementNurseId(data.replacement_nurse_id || "");
    setNote(data.note || "");
    setShowEditModal(true);
  };

  // üëá ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏£‡∏•‡∏≠‡∏¢‡∏à‡∏≤‡∏Å assignments (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ id)
  const openEditShiftFromAssignments = ({ nurseId, date, shiftType }) => {
    const shiftArray = assignments[date]?.[nurseId] || [];
    const shift = shiftArray.find((s) => s.type === shiftType);

    if (!shift) {
      toast.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô assignments");
      return;
    }

    setEditingShiftId(null); // ‡πÑ‡∏°‡πà‡∏°‡∏µ id ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    setIsOt(shift.is_ot || false);
    setReplacementNurseId(shift.replacement_nurse_id || "");
    setNote(shift.note || "");
    setEditShiftDetail({ nurseId, date, shiftType });
    setShowEditModal(true);
  };

  const canEdit =
    userRole === "admin" ||
    currentUser?.user_type === "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•" ||
    currentUser?.user_type === "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î";

  const viewPlanDetails = async (planId, name) => {
    const { data, error } = await supabase
      .from("nurse_shifts")
      .select("*")
      .eq("plan_id", planId);

    if (error || !data) {
      toast.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      return;
    }

    const result = {};
    data.forEach((row) => {
      const date = row.shift_date;
      if (!result[date]) result[date] = {};
      if (!result[date][row.nurse_id]) result[date][row.nurse_id] = [];
      result[date][row.nurse_id].push(row.shift_type);
    });

    setViewingAssignments(result);
    setViewingPlan({ id: planId, name });
    setSummaryText(""); // üßº ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£
  };

  const saveToExistingPlan = async () => {
    if (!planId || !hospitalId || !wardId) {
      toast.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ plan_id ‡∏´‡∏£‡∏∑‡∏≠ hospital/ward");
      return;
    }

    try {
      const nurseDisplayOrder = nurseList.reduce((acc, nurse, index) => {
        acc[nurse.id] = index;
        return acc;
      }, {});

      const rows = [];

      for (const nurse of nurseList) {
        const nurseId = nurse.id;
        const displayOrder = nurseDisplayOrder[nurseId];

        // ‡∏´‡∏≤‡πÄ‡∏ß‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô assignments
        const shiftsForNurse = [];
        for (const [date, nurses] of Object.entries(assignments)) {
          const nurseShifts = nurses[nurseId];
          if (nurseShifts && nurseShifts.length > 0) {
            for (const shift of nurseShifts) {
              shiftsForNurse.push({ date, shift });
            }
          }
        }

        if (shiftsForNurse.length > 0) {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
          for (const s of shiftsForNurse) {
            rows.push({
              plan_id: planId, // üîß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å newPlanId ‡πÄ‡∏õ‡πá‡∏ô planId (‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
              nurse_id: nurseId,
              shift_date: s.date,
              shift_type: s.shift,
              display_order: displayOrder,
              hospital_id: hospitalId,
              ward_id: wardId,
            });
          }
        } else {
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡πÄ‡∏•‡∏¢ ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å placeholder
          rows.push({
            plan_id: planId,
            nurse_id: nurseId,
            shift_date: null,
            shift_type: null,
            display_order: displayOrder,
            hospital_id: hospitalId,
            ward_id: wardId,
          });
        }
      }

      await supabase.from("nurse_shifts").delete().eq("plan_id", planId);

      const { error } = await supabase.from("nurse_shifts").insert(rows);
      if (error) {
        toast.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      }
    } catch (e) {
      toast.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + e.message);
    }
  };

  useEffect(() => {
    // load year/month ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å localStorage ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const raw = localStorage.getItem("shift_plan_year_month");
    if (raw) {
      try {
        const ypm = JSON.parse(raw);
        if (ypm.year && ypm.month) {
          setYear(ypm.year);
          setMonth(ypm.month);
        }
      } catch {}
    }
  }, []);

  useEffect(() => {
    const storedUser = localStorage.getItem("logged_in_user");
    if (storedUser) {
      const user = JSON.parse(storedUser);
      console.log("üîç logged_in_user (parsed):", user);
      console.log("üë§ role:", user.role); // ‚Üê ‡πÉ‡∏ä‡πâ .role ‡πÅ‡∏ó‡∏ô .user_role
      console.log("üë§ user_type:", user.user_type);
      console.log("üë§ username:", user.username);

      setCurrentUser(user);
      setUserRole(user.role || "");
      setUserShiftWardID(user.shift_ward_id || user.ward_id || ""); // ‚úÖ ‡πÉ‡∏ä‡πâ fallback
      setUserHospitalID(user.hospital_id || "");

      // üîí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ lock ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      setIsHospitalLocked(user.role !== "admin");
      setIsWardLocked(
        user.role !== "admin" && user.user_type !== "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"
      );

      // üü° ‡∏ï‡∏±‡πâ‡∏á selected hospital/ward ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      setSelectedHospitalId(user.hospital_id || "");
      setSelectedWardId(user.shift_ward_id || "");
    }
  }, []);

  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤ selectedWardId ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏µ ward id ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log("‚úÖ typeof userShiftWardID:", typeof userShiftWardID);
    console.log(
      "‚úÖ allWards id types:",
      allWards.map((w) => typeof w.id)
    );
    console.log("‚úÖ allWards:", allWards);
    // ‚úÖ wait for allWards to load before setting selected ward
    if (
      allWards.length > 0 &&
      userShiftWardID &&
      !selectedWardId &&
      allWards.some((w) => String(w.id) === String(userShiftWardID))
    ) {
      setSelectedWardId(userShiftWardID);
    }
  }, [allWards, selectedWardId, userShiftWardID]);

  // üåê ‡πÇ‡∏´‡∏•‡∏î context ‡∏à‡∏≤‡∏Å localStorage
  useEffect(() => {
    const loadContext = async () => {
      const raw = localStorage.getItem("shift_planner_context");
      let prefs = raw ? JSON.parse(raw) : null;

      if (!prefs) {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô localStorage ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å hospitals
        const hospitalRes = await supabase
          .from("hospitals")
          .select("id, name, shift_default_ward_id, shift_default_ward_name")
          .eq("id", DEFAULT_HOSPITAL_ID) // ‡∏´‡∏£‡∏∑‡∏≠ hospitalId ‡∏à‡∏≤‡∏Å login
          .single();

        const h = hospitalRes.data;
        if (h) {
          prefs = {
            hospital_id: h.id,
            ward_id: h.shift_default_ward_id || DEFAULT_WARD_ID,
            hospital_name: h.name,
            ward_name: h.shift_default_ward_name || DEFAULT_WARD_NAME,
          };
          localStorage.setItem("shift_planner_context", JSON.stringify(prefs));
        }
      }

      if (prefs) {
        setHospitalId(prefs.hospital_id);
        setWardId(prefs.ward_id);
        setHospitalName(prefs.hospital_name);
        setWardName(prefs.ward_name);
      }
    };

    loadContext();
  }, []);

  // üöÄ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å Supabase
  useEffect(() => {
    const fetchPlans = async () => {
      const { data, error } = await supabase
        .from("shift_plans")
        .select("*")
        .order("created_at", { ascending: false });

      if (error) {
        toast.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        setPlanList(data);
      }
    };

    fetchPlans();
  }, []);

  useEffect(() => {
    const fetchWardConfig = async () => {
      if (!currentUser?.ward_id) return;

      const { data, error } = await supabase
        .from("wards")
        .select("*")
        .eq("id", currentUser.ward_id)
        .single();

      if (!error && data) setWardConfig(data);
    };

    fetchWardConfig();
  }, [currentUser]);

  const fetchExistingPlans = async () => {
    const { data, error } = await supabase
      .from("shift_plans")
      .select("*")
      .eq("hospital_id", hospitalId)
      .eq("ward_id", wardId)
      .eq("year", year)
      .eq("month", month)
      .order("created_at", { ascending: false });

    if (!error && data) {
      setExistingPlans(data);
    }
  };

  const loadExistingPlans = async () => {
    const { data, error } = await supabase
      .from("shift_plans")
      .select("*")
      .eq("hospital_id", selectedHospitalId)
      .eq("ward_id", selectedWardId)
      .eq("year", year)
      .eq("month", month)
      .order("created_at", { ascending: false });

    if (error) {
      console.error("‚ùå Failed to load shift plans:", error);
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£");
      return;
    }

    setExistingPlans(data);
  };

  useEffect(() => {
    if (!hospitalId || !wardId) return;
    fetchExistingPlans(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
  }, [hospitalId, wardId, year, month]);

  // üöÄ ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô
  const deletePlan = async (planId) => {
    const confirmed = await Swal.fire({
      title: "üóë ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ô‡∏µ‡πâ?",
      text: "‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (confirmed.isConfirmed) {
      const { error } = await supabase
        .from("shift_plans")
        .delete()
        .eq("id", planId);

      if (error) {
        toast.error("‚ùå ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        toast.success("üóë ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state
        setPlanList((prev) => prev.filter((plan) => plan.id !== planId));
      }
    }
  };

  useEffect(() => {
    const loadHospitalsAndWards = async () => {
      const { data: hospitals } = await supabase.from("hospitals").select("*");
      const { data: wards } = await supabase.from("wards").select("*");
      setAllHospitals(hospitals);
      setAllWards(wards);
    };

    if (userRole === "admin") {
      loadHospitalsAndWards();
    }
  }, [userRole]);

  useEffect(() => {
    const loadHolidays = async () => {
      if (!hospitalId || !wardId) return;

      const { data, error } = await supabase
        .from("nurse_holidays")
        .select("nurse_id, date")
        .eq("year", year);

      if (!data) return;

      const holidayMap = {};
      data.forEach((row) => {
        const d = dayjs(row.date).format("YYYY-MM-DD");
        if (!holidayMap[row.nurse_id]) holidayMap[row.nurse_id] = new Set();
        holidayMap[row.nurse_id].add(d);
      });

      console.log("üìÜ [DEBUG] ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏≤‡∏Å DB:", data);
      console.log("üìÜ [DEBUG] nurseHolidays (holidayMap):", holidayMap);

      // setStatusMessage(
      //   `[DEBUG] ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: ${JSON.stringify(holidayMap)}`
      // );
      setNurseHolidays(holidayMap);
      // LOG: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ
      if (nurseList && nurseList.length > 0) {
        console.log("[LOG] ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å DB:");
        Object.entries(holidayMap).forEach(([nurseId, daysSet]) => {
          const nurse = nurseList.find((n) => n.id === nurseId);
          const name = nurse?.display_name || nurse?.name || nurseId;
          const daysArr = Array.from(daysSet);
          console.log(`- ${name}:`, daysArr.join(", "));
        });
      } else {
        console.log(
          "[LOG] (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ nurseList, ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á nurseList ‡πÇ‡∏´‡∏•‡∏î)"
        );
      }

      console.log("‚úÖ [DEBUG] setNurseHolidays:", holidayMap);
    };

    loadHolidays();
  }, [hospitalId, wardId, year]);

  useEffect(() => {
    if (!hospitalId || !wardId) return;

    const loadPlanId = async () => {
      const { data, error } = await supabase
        .from("shift_plans")
        .select("id, name")
        .eq("hospital_id", hospitalId)
        .eq("ward_id", wardId)
        .eq("month", month)
        .eq("year", year)
        .limit(1)
        .maybeSingle();

      if (error || !data) {
        setPlanId(null);
        setShiftPlanName("");
        setStatusMessage("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô");
      } else {
        setPlanId(data.id);
        setShiftPlanName(data.name);
      }
    };

    loadPlanId();
  }, [hospitalId, wardId, year, month]);

  /* ==========================================================
   üì°  ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏£‡∏à‡∏≤‡∏Å nurse_shifts (‡∏ï‡∏≤‡∏° planId) ‡πÅ‡∏•‡πâ‡∏ß map ‚Üí assignments
   ========================================================== */
  useEffect(() => {
    if (!hospitalId || !wardId || !planId || !nurseList.length) return;

    const fetchFromSupabase = async () => {
      lastWarnings.current.clear(); // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤

      const { data, error } = await supabase
        .from("nurse_shifts")
        .select("*")
        .eq("hospital_id", hospitalId)
        .eq("ward_id", wardId)
        .eq("plan_id", planId);

      if (error) {
        setStatusMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        return;
      }

      if (!data?.length) {
        /* üëâ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡πÄ‡∏Å‡πà‡∏≤ ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô */
        const blank = {};
        nurseList.forEach((n) => (blank[n.id] = {}));
        setAssignments(markHolidaysDisabled(blank, nurseHolidays, year, month));
        setStatusMessage("üÜï ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ");
        return;
      }

      /* üëâ ‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡πÄ‡∏Å‡πà‡∏≤ ‚Üí map ‡πÄ‡∏õ‡πá‡∏ô assignments */
      const loaded = {};
      data.forEach((row) => {
        const nurseId = row.nurse_id;
        const dateKey = row.shift_date; // YYYY-MM-DD

        if (!loaded[nurseId]) loaded[nurseId] = {};
        if (!loaded[nurseId][dateKey]) loaded[nurseId][dateKey] = [];

        loaded[nurseId][dateKey].push(row.shift_type);
      });

      /* üëâ ‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡πÄ‡∏•‡∏¢ */
      nurseList.forEach((n) => {
        if (!loaded[n.id]) loaded[n.id] = {};
      });

      setAssignments(loaded);
      setStatusMessage("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß");
    };

    fetchFromSupabase();
  }, [hospitalId, wardId, planId, year, month, nurseList]); // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏° nurseList

  // üß† ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÅ‡∏ö‡∏ö Fisher‚ÄìYates
  // ---------- helper for auto-scheduling ----------
  function shuffle(arr) {
    const a = [...arr];
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  }

  /* ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û allow_morning / evening / night 
  ‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö  month_rest_days ‡∏Ç‡∏≠‡∏á‡∏ß‡∏≠‡∏£‡πå‡∏î (rest  ‚â† holiday ‡∏à‡∏£‡∏¥‡∏á)
  PATTERN 10 ‡∏ß‡∏±‡∏ô  (‡∏ä,‡∏ä,‡∏û‡∏±‡∏Å,‡∏û‡∏±‡∏Å,‡∏ö,‡∏ö,‡∏î,‡∏î,‡∏û‡∏±‡∏Å,‡∏û‡∏±‡∏Å)
  ‡πÄ‡∏ä‡πâ‡∏≤ ‚ûú ‡πÄ‡∏ä‡πâ‡∏≤ ‚ûú ‡∏û‡∏±‡∏Å ‚ûú ‡∏û‡∏±‡∏Å ‚ûú ‡∏ö‡πà‡∏≤‡∏¢ ‚ûú ‡∏ö‡πà‡∏≤‡∏¢ ‚ûú ‡∏î‡∏∂‡∏Å ‚ûú ‡∏î‡∏∂‡∏Å ‚ûú ‡∏û‡∏±‡∏Å ‚ûú ‡∏û‡∏±‡∏Å ‚Ä¶ (‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà)
  ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏π‡∏Å ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (allow_*) ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏±‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  ‡∏û‡∏≠‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏ö 1) ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏£‡πÉ‡∏î‡∏Å‡πá‡πÉ‡∏ä‡πâ ‚Äú‡∏£‡∏≠‡∏ö 2‚Äù ‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° 
  ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ offset ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‚Üí ‡∏û‡∏±‡∏Å (=null) ‡∏à‡∏∞‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô  
  ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ñ‡πâ‡∏≤ nurse.allow_weekend == false
  ‡∏à‡∏±‡∏î‡∏Ñ‡∏ô normal ‡∏Å‡πà‡∏≠‡∏ô  ‚Üí low_priority ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
  1Ô∏è‚É£ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏∏‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô (‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà low_priority === false)
  2Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ï‡πá‡∏° ‡∏à‡∏∂‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡∏î‡∏∂‡∏á‡∏Ñ‡∏ô low_priority ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∏‡∏î*/
  /* -------------------------------------------------------------
     ùêõùêÆùê¢ùê•ùêùùêÄùêÆùê≠ùê®ùêÄùê¨ùê¨ùê¢ùê†ùêßùê¶ùêûùêßùê≠ùê¨  (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô balance rest / fill gaps)
     ------------------------------------------------------------- */
  /* ---------- helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ---------- */
  /* ---------- helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (v3) ---------- */
  function buildAutoAssignments() {
    /* 1) ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */
    const maxPerShift = {
      morning: wardConfig?.max_morning_shift_per_day ?? 4,
      evening: wardConfig?.max_evening_shift_per_day ?? 3,
      night: wardConfig?.max_night_shift_per_day ?? 3,
    };
    const minRestDays =
      Array.isArray(wardConfig?.month_rest_days) &&
      wardConfig.month_rest_days.length === 12
        ? wardConfig.month_rest_days[month - 1]
        : 8;

    const PATTERN = [
      "morning",
      "morning",
      null,
      null,
      "evening",
      "evening",
      "night",
      "night",
      null,
      null,
    ];
    const LEN = PATTERN.length;
    const SHIFTS = ["morning", "evening", "night"];

    const isWeekend = (d) =>
      [0, 6].includes(
        dayjs(
          `${year}-${String(month).padStart(2, "0")}-${String(d).padStart(
            2,
            "0"
          )}`
        ).day()
      );

    /* 2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ */
    const assignments = {};
    const remain = {}; // ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
    nurseList.forEach((n) => {
      assignments[n.id] = {};

      // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡πä‡∏Å ‚Äú‡∏û‡∏±‡∏Å‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‚Äù ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
      const mustRest = n.rest_flexible ? 0 : minRestDays;
      remain[n.id] = Math.max(0, daysInMonth - mustRest);
    });

    nurseList.forEach((n) => {
      assignments[n.id] = {};
      // --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î quota ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô ------------------------------------
      //   ‚Ä¢ core           ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (minRestDays)
      //   ‚Ä¢ rest_flexible  ‚Üí ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ 30 ‡∏ß‡∏±‡∏ô)
      //   ‚Ä¢ low_priority   ‚Üí quota ‡πÄ‡∏ó‡πà‡∏≤ core ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡πâ‡∏≤‡∏¢
      const workCap = (n) =>
        n.rest_flexible ? daysInMonth : Math.max(0, daysInMonth - minRestDays);

      nurseList.forEach((n) => {
        assignments[n.id] = {};
        remain[n.id] = workCap(n); // ‚Üê ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô workCap
      });
    });

    // --- ‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° ---
    const wkMorning = nurseList.filter(
      // ‡∏à-‡∏® ‡πÄ‡∏ä‡πâ‡∏≤
      (n) => !n.allow_weekend && !n.low_priority && n.allow_morning
    );
    const coreNurses = nurseList.filter(
      // ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏û‡∏±‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
      (n) => !n.low_priority && !n.rest_flexible && !wkMorning.includes(n)
    );
    const flexNurses = nurseList.filter(
      // ‡∏û‡∏±‡∏Å‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
      (n) => n.rest_flexible && !n.low_priority
    );
    const lowPri = nurseList.filter((n) => n.low_priority);

    // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏£
    const normal = [...coreNurses, ...flexNurses];

    // --- ‡∏™‡∏∏‡πà‡∏° offset ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô PATTERN ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ---
    const offsets = {};
    [...coreNurses, ...flexNurses, ...lowPri].forEach(
      (n, i) => (offsets[n.id] = i % LEN)
    );

    /* 4) ‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô */
    for (let day = 1; day <= daysInMonth; day++) {
      const used = { morning: 0, evening: 0, night: 0 };

      /* 4-A) ‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤ ‡∏à-‡∏® ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏∏‡πà‡∏° week-day morning */
      if (!isWeekend(day)) {
        for (const n of wkMorning) {
          if (used.morning >= maxPerShift.morning) break;
          if (remain[n.id] === 0) continue;

          assignments[n.id][day] = assignments[n.id][day] || {};
          assignments[n.id][day].morning = { value: true };
          used.morning += 1;
          remain[n.id] -= 1;
        }
      }

      /* 4-B) ‡πÄ‡∏ï‡∏¥‡∏° PATTERN ‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° */
      const fillPattern = (arr) => {
        for (const n of arr) {
          if (remain[n.id] === 0) continue;
          if (isWeekend(day) && !n.allow_weekend) continue;

          // üö´ ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• n
          const ymd = `${yearMonth}-${String(day).padStart(2, "0")}`;
          const isHoliday =
            nurseHolidays?.[n.id]?.has?.(ymd) ||
            nurseHolidays?.[n.id]?.includes?.(ymd); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô Set ‡∏´‡∏£‡∏∑‡∏≠ Array
          if (isHoliday) continue;

          const want = PATTERN[(day - 1 + offsets[n.id]) % LEN];
          if (!want) continue;
          if (!n[`allow_${want}`]) continue;
          if (used[want] >= maxPerShift[want]) continue;

          assignments[n.id][day] = assignments[n.id][day] || {};
          assignments[n.id][day][want] = { value: true };
          used[want] += 1;
          remain[n.id] -= 1;
        }
      };
      fillPattern(normal);
      fillPattern(lowPri); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ PATTERN ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∏‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á

      /* 4-C) PATCH-PASS ‚Äì ‡∏≠‡∏∏‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î */
      for (const shift of SHIFTS) {
        let need = maxPerShift[shift] - used[shift];
        if (need <= 0) continue;

        /* ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ quota ‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢, non-lowPri ‡∏Å‡πà‡∏≠‡∏ô */
        const ymd = `${yearMonth}-${String(day).padStart(2, "0")}`;
        const cand = [...nurseList]
          .filter(
            (n) =>
              remain[n.id] > 0 &&
              (!isWeekend(day) || n.allow_weekend) &&
              n[`allow_${shift}`] &&
              !assignments[n.id][day]?.[shift] &&
              !(
                nurseHolidays?.[n.id]?.has?.(ymd) ||
                nurseHolidays?.[n.id]?.includes?.(ymd)
              )
          )
          .sort((a, b) => {
            /* 1) ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ quota ‡∏°‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô */
            const diff = remain[b.id] - remain[a.id];
            if (diff !== 0) return diff;
            /* 2) ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà low_priority ‡∏Å‡πà‡∏≠‡∏ô */
            return a.low_priority === b.low_priority
              ? 0
              : a.low_priority
              ? 1
              : -1;
          });

        for (let i = 0; i < need && i < cand.length; i++) {
          const n = cand[i];
          assignments[n.id][day] = assignments[n.id][day] || {};
          assignments[n.id][day][shift] = { value: true };
          used[shift] += 1;
          remain[n.id] -= 1;
        }
      }
    }

    return assignments;
  }

  function assignEqualShift(skipFirstDays = 0) {
    const maxPerShift = {
      morning: wardConfig?.max_morning_shift_per_day ?? 4,
      evening: wardConfig?.max_evening_shift_per_day ?? 3,
      night: wardConfig?.max_night_shift_per_day ?? 3,
    };
    const minRestDays =
      Array.isArray(wardConfig?.month_rest_days) &&
      wardConfig.month_rest_days.length === 12
        ? wardConfig.month_rest_days[month - 1]
        : 8;

    const SHIFTS = ["morning", "evening", "night"];
    const isWeekend = (d) =>
      [0, 6].includes(
        dayjs(
          `${year}-${String(month).padStart(2, "0")}-${String(d).padStart(
            2,
            "0"
          )}`
        ).day()
      );

    // 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° assignment ‡πÅ‡∏•‡∏∞ remain
    const assignments = {};
    const remain = {};
    nurseList.forEach((n) => {
      assignments[n.id] = {};
      // quota ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
      const mustRest = n.rest_flexible ? 0 : minRestDays;
      remain[n.id] = Math.max(0, daysInMonth - mustRest);
    });

    // 3. ‡∏•‡∏π‡∏õ‡∏ß‡∏±‡∏ô
    for (let day = 1 + skipFirstDays; day <= daysInMonth; day++) {
      const used = { morning: 0, evening: 0, night: 0 };

      for (const shift of SHIFTS) {
        const max = maxPerShift[shift];
        let assignedToday = 0;

        // ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö nurse
        const shuffledNurses = [...nurseList].sort(() => Math.random() - 0.5);

        for (const nurse of shuffledNurses) {
          if (assignedToday >= max) break;
          if (remain[nurse.id] === 0) continue;

          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î/‡∏•‡∏≤
          const ymd = `${yearMonth}-${String(day).padStart(2, "0")}`;
          const isHoliday =
            nurseHolidays?.[nurse.id]?.has?.(ymd) ||
            nurseHolidays?.[nurse.id]?.includes?.(ymd);
          if (isHoliday) continue;

          // ‡πÄ‡∏ä‡πá‡∏Ñ allow ‡πÄ‡∏ß‡∏£
          if (!nurse[`allow_${shift}`]) continue;
          if (isWeekend(day) && !nurse.allow_weekend) continue;

          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
          if (
            shift === "night" &&
            wardConfig?.rule_no_evening_to_night &&
            day > 1
          ) {
            const prev = assignments[nurse.id]?.[day - 1];
            if (prev?.evening?.value) continue;
          }
          if (
            shift === "morning" &&
            wardConfig?.rule_no_night_to_morning &&
            day > 1
          ) {
            const prev = assignments[nurse.id]?.[day - 1];
            if (prev?.night?.value) continue;
          }

          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
          const todayAssign = assignments[nurse.id]?.[day] || {};
          let hasShift = false;
          for (const s of SHIFTS) {
            if (todayAssign[s]?.value) hasShift = true;
          }
          if (hasShift) continue;

          // ‡πÅ‡∏à‡∏Å‡πÄ‡∏ß‡∏£
          assignments[nurse.id][day] = assignments[nurse.id][day] || {};
          assignments[nurse.id][day][shift] = { value: true };
          used[shift] += 1;
          remain[nurse.id] -= 1;
          assignedToday++;
        }
      }
    }
    return assignments;
  }

  function toggleShift(nurse, day, shift) {
    // 1) ‡∏ñ‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏ß‡∏£‡∏ô‡∏µ‡πâ ‚Üí ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å
    if (!nurse[`allow_${shift}`]) {
      toast.warn(`‚õî ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡∏£${shiftLabels[shift]}`);
      return;
    }

    const nurseId = nurse.id;
    const dateKey = `${yearMonth}-${String(day).padStart(2, "0")}`;

    const newAssignments = { ...assignments };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö holiday ‡∏´‡∏£‡∏∑‡∏≠ disabled ‡πÉ‡∏ô assignments (‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤)
    if (
      nurseHolidays?.[nurseId]?.has?.(dateKey) ||
      assignments[nurseId]?.[day]?.[shift]?.disabled
    ) {
      console.log(
        `[DEBUG] [toggleShift] BLOCKED: nurseId=${nurseId}, day=${day}, shift=${shift}, dateKey=${dateKey}, nurseHolidays=`,
        nurseHolidays[nurseId]
      );
      toast.warning(`‚õî ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${day}/${month} ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏á‡∏≤‡∏ô`);
      return;
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    if (!newAssignments[nurseId]) newAssignments[nurseId] = {};
    if (!newAssignments[nurseId][day]) newAssignments[nurseId][day] = {};
    const shiftData = newAssignments[nurseId][day][shift] || {
      value: false,
      is_ot: false,
      note: "",
      replacement_nurse_id: null,
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö shift ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°
    const prevDay = String(day - 1).padStart(2, "0");
    const prevShiftData = newAssignments[nurseId]?.[day - 1]?.["night"];
    if (
      wardConfig?.rule_no_night_to_morning &&
      shift === "morning" &&
      prevShiftData?.value
    ) {
      toast.warning(`‚õî ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏£‡∏î‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ä‡πâ‡∏≤ (${day}/${month})`);
      return;
    }

    const currentShifts =
      Object.entries(newAssignments[nurseId]?.[day] || {}).filter(
        ([_, s]) => s.value
      ) || [];

    if (
      wardConfig?.rule_no_evening_to_night &&
      ((shift === "evening" &&
        newAssignments[nurseId]?.[day]?.["night"]?.value) ||
        (shift === "night" &&
          newAssignments[nurseId]?.[day]?.["evening"]?.value))
    ) {
      toast.warning(`‚õî ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏î‡∏∂‡∏Å (${day}/${month})`);
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏ô shift ‡∏ô‡∏±‡πâ‡∏ô ‡πÜ (‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
    let countThisShift = 0;
    for (const otherNurseId in newAssignments) {
      const dayShifts = newAssignments[otherNurseId]?.[day];
      if (dayShifts?.[shift]?.value) countThisShift++;
    }

    const maxPerShift = {
      morning: wardConfig?.max_morning_shift_per_day ?? 4,
      evening: wardConfig?.max_evening_shift_per_day ?? 3,
      night: wardConfig?.max_night_shift_per_day ?? 3,
    };

    if (!shiftData.value && countThisShift >= maxPerShift[shift]) {
      toast.warning(
        `‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${day}/${month} ‡∏°‡∏µ‡πÄ‡∏ß‡∏£${shiftLabels[shift]}‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß`
      );
      return;
    }

    // toggle shift
    shiftData.value = !shiftData.value;
    newAssignments[nurseId][day][shift] = shiftData;
    setAssignments(
      markHolidaysDisabled(newAssignments, nurseHolidays, year, month)
    );
  }

  const saveToSupabase = async (optionalPlanName) => {
    console.log("üíæ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà...");
    console.log(
      "üìã [DEBUG] assignments ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å saveToSupabase:",
      assignments
    );

    let shiftCount = 0;
    const assignmentRows = [];

    for (const [nurseId, days] of Object.entries(assignments)) {
      for (const [day, shiftData] of Object.entries(days)) {
        const shift_date = dayjs(`${year}-${month}-${day}`).format(
          "YYYY-MM-DD"
        );

        for (const shiftType of ["morning", "evening", "night"]) {
          const shiftEntry = shiftData[shiftType];
          if (!shiftEntry?.value) continue; // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î shift ‡∏ô‡∏µ‡πâ

          shiftCount++;

          assignmentRows.push({
            nurse_id: nurseId,
            shift_date,
            shift_type: shiftType,
            is_ot: shiftEntry.is_ot || false,
            note: shiftEntry.note || "",
            replacement_nurse_id:
              shiftEntry.replacement_nurse_id?.trim() !== ""
                ? shiftEntry.replacement_nurse_id
                : null,
            plan_id: null, // ‡πÉ‡∏™‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å insert plan
            hospital_id: hospitalId,
            ward_id: wardId,
          });
        }
      }
    }

    if (shiftCount === 0) {
      toast.error("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡πÉ‡∏î‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ");
      return;
    }

    const planNameToUse = optionalPlanName || shiftPlanName;
    if (!planNameToUse || planNameToUse.trim() === "") {
      toast.error("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
      return;
    }

    const { data: plan, error: planError } = await supabase
      .from("shift_plans")
      .insert([
        {
          name: planNameToUse,
          hospital_id: hospitalId,
          ward_id: wardId,
          year,
          month,
        },
      ])
      .select()
      .single();

    if (planError || !plan) {
      toast.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      console.error("üõë shift_plans insert error:", planError);
      return;
    }

    // plan_id ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß
    assignmentRows.forEach((row) => (row.plan_id = plan.id));

    // üîç ‡∏ï‡∏£‡∏ß‡∏à uuid
    assignmentRows.forEach((row, i) => {
      [
        "nurse_id",
        "plan_id",
        "hospital_id",
        "ward_id",
        "replacement_nurse_id",
      ].forEach((field) => {
        const val = row[field];
        if (val && typeof val === "string" && !/^[0-9a-fA-F-]{36}$/.test(val)) {
          console.warn(`‚ö†Ô∏è [INVALID UUID] Row ${i} ${field} =`, val);
        }
      });
    });

    console.log("üì¶ assignmentRows:", assignmentRows);

    const { error: insertError } = await supabase
      .from("nurse_shifts")
      .insert(assignmentRows);

    if (insertError) {
      toast.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      console.error("üõë nurse_shifts insert error:", insertError);
    } else {
      toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      setPlanId(plan.id);
    }

    setEditingPlan(true);
  };

  useEffect(() => {
    const fetchHospitalsAndWards = async () => {
      const { data: hospitals } = await supabase.from("hospitals").select("*");
      const { data: wards } = await supabase.from("wards").select("*");
      setAllHospitals(hospitals || []);
      setAllWards(wards || []);
    };

    fetchHospitalsAndWards();
  }, []);
  const fetchNurseList = async (hId = hospitalId, wId = wardId) => {
    if (!hId || !wId) return;

    console.log("üîç Fetching nurses for hospital_id:", hId, "ward_id:", wId);
    const { data: nurses, error: nurseError } = await supabase
      .from("nurses")
      .select(
        "id, display_name, display_order, allow_morning, allow_evening, allow_night, allow_weekend, low_priority, rest_flexible"
      )
      .eq("hospital_id", hId)
      .eq("ward_id", wId)
      .eq("is_active_for_shift", true)
      .order("display_order", { ascending: true });

    if (nurseError) {
      console.error("Fetch nurses error:", nurseError);
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÑ‡∏î‡πâ");
      return false;
    }

    console.log("‚úÖ Loaded nurses:", nurses);

    const map = {};
    nurses.forEach((n) => {
      map[n.id] = n.display_name;
    });
    setNurseMap(map);

    const startDate = `${year}-${String(month).padStart(2, "0")}-01`;
    const daysInMonth = dayjs(startDate).daysInMonth();
    const endDate = `${year}-${String(month).padStart(2, "0")}-${String(
      daysInMonth
    ).padStart(2, "0")}`;
    console.log("[DEBUG] startDate:", startDate, "endDate:", endDate);

    // üü† ‡πÉ‡∏ä‡πâ nurseHolidays ‡∏ó‡∏µ‡πà global state ‡πÅ‡∏ó‡∏ô ‡πÑ‡∏°‡πà query DB ‡∏ã‡πâ‡∏≥
    const nurseHolidayMap = nurseHolidays;
    console.log(
      "[DEBUG] ‡πÉ‡∏ä‡πâ nurseHolidayMap (‡∏à‡∏≤‡∏Å global state):",
      nurseHolidayMap
    );

    console.log("üìÜ [DEBUG] ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏à‡∏≤‡∏Å nurse_holidays:", nurseHolidayMap);

    const assignmentsInit = {};
    for (const nurse of nurses) {
      const nurseId = nurse.id;
      assignmentsInit[nurseId] = {};

      for (let d = 1; d <= daysInMonth; d++) {
        const dateStr = `${year}-${String(month).padStart(2, "0")}-${String(
          d
        ).padStart(2, "0")}`;
        // üü° ‡πÉ‡∏ä‡πâ nurseHolidayMap ‡πÅ‡∏ó‡∏ô holidays
        const isHoliday =
          nurseHolidayMap?.[nurseId]?.has?.(dateStr) ||
          nurseHolidayMap?.[nurseId]?.includes?.(dateStr);
        assignmentsInit[nurseId][d] = {
          morning: {
            value: false,
            disabled: !!isHoliday,
            reason: isHoliday ? "‡∏•‡∏≤‡∏á‡∏≤‡∏ô" : null,
          },
          evening: {
            value: false,
            disabled: !!isHoliday,
            reason: isHoliday ? "‡∏•‡∏≤‡∏á‡∏≤‡∏ô" : null,
          },
          night: {
            value: false,
            disabled: !!isHoliday,
            reason: isHoliday ? "‡∏•‡∏≤‡∏á‡∏≤‡∏ô" : null,
          },
        };
        if (isHoliday) {
          console.log(
            `[DEBUG] ‡∏•‡∏≤: nurse=${nurseMap[nurseId] || nurseId}, ‡∏ß‡∏±‡∏ô=${dateStr}`
          );
        }
      }
    }
    console.log("[DEBUG] assignmentsInit ‡∏´‡∏•‡∏±‡∏á mark ‡∏ß‡∏±‡∏ô‡∏•‡∏≤:", assignmentsInit);

    const sortedNurses = [...nurses].sort((a, b) => {
      const aOrder = a.display_order ?? 9999;
      const bOrder = b.display_order ?? 9999;
      return aOrder - bOrder;
    });

    setNurseList(sortedNurses);
    setAssignments(
      markHolidaysDisabled(assignmentsInit, nurseHolidays, year, month)
    );

    // [LOG] ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•+‡∏ß‡∏±‡∏ô‡∏•‡∏≤ ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á nurseList ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î
    if (nurseHolidayMap && sortedNurses.length > 0) {
      console.log("[LOG] [Final] ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á nurseList ‡πÇ‡∏´‡∏•‡∏î:");
      Object.entries(nurseHolidayMap).forEach(([nurseId, daysSet]) => {
        const nurse = sortedNurses.find((n) => n.id === nurseId);
        const name = nurse?.display_name || nurse?.name || nurseId;
        const daysArr = Array.from(daysSet);
        console.log(`- ${name}: ${daysArr.join(", ")}`);
      });
    }

    console.log("‚úÖ [DEBUG] setAssignments (holiday):", assignmentsInit);
    console.log(
      "üìã [DEBUG] assignments ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å fetchNurseList:",
      assignmentsInit
    );
    setStatusMessage(
      `[DEBUG] assignmentsInit (holiday): ${JSON.stringify(assignmentsInit)}`
    );
    return true;
  };

  useEffect(() => {
    if (!nurseList.length) return; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠

    setAssignments((prev) => {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ assignment ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô object ‡∏ß‡πà‡∏≤‡∏á
      const cloned = { ...prev };

      nurseList.forEach((n) => {
        if (!cloned[n.id]) cloned[n.id] = {}; // ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏õ‡∏•‡πà‡∏≤
      });
      return cloned; // ‚úÖ setAssignments ‡πÉ‡∏´‡∏°‡πà
    });
  }, [nurseList]); // ‚Üê ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà nurseList ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  const loadPlanById = async (planId) => {
    const { data, error } = await supabase
      .from("nurse_shifts")
      .select("*")
      .eq("plan_id", planId);

    if (error || !data) {
      console.error("‚ùå Failed to load plan:", error);
      return;
    }

    const newAssignments = {};

    /* ----------------- ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏• query ‡πÄ‡∏õ‡πá‡∏ô newAssignments ----------------- */
    data.forEach((row) => {
      const nurseId = row.nurse_id;
      const shiftDate = row.shift_date; // "YYYY-MM-DD"
      const day = new Date(shiftDate).getDate(); // 1‚Äì31
      const shift = row.shift_type; // "morning" | "evening" | "night"

      if (!nurseId || !shiftDate || !shift) return;

      if (!newAssignments[nurseId]) newAssignments[nurseId] = {};
      if (!newAssignments[nurseId][day]) newAssignments[nurseId][day] = {};

      newAssignments[nurseId][day][shift] = {
        value: true,
        is_ot: row.is_ot || false,
        note: row.note || "",
        replacement_nurse_id: row.replacement_nurse_id || null,
        replacement_name: nurseMap?.[row.replacement_nurse_id] || "",
      };
    });

    /* -------- ‡πÄ‡∏ï‡∏¥‡∏° nurse ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á -------- */
    if (nurseList && nurseList.length) {
      nurseList.forEach((n) => {
        if (!newAssignments[n.id]) newAssignments[n.id] = {}; // ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏õ‡∏•‡πà‡∏≤
      });
    }

    setAssignments(
      markHolidaysDisabled(newAssignments, nurseHolidays, year, month)
    );

    setPlanId(planId);
  };

  const getHospitalName = (id) => {
    const h = allHospitals.find((h) => h.id === id);
    return h ? h.name : "(‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•)";
  };

  const getWardName = (id) => {
    const w = allWards.find((w) => w.id === id);
    return w ? w.name : "(‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≠‡∏£‡πå‡∏î)";
  };

  const openEditShiftModal = (nurseId, dateKey, shift) => {
    const day = Number(dateKey.split("-")[2]); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô day 1-31
    const current = assignments[nurseId]?.[day]?.[shift] || {};

    Swal.fire({
      title: "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£",
      html: `
      <div style="text-align: left">
        <label><input type="checkbox" id="is_ot" ${
          current.is_ot ? "checked" : ""
        }/> OT</label><br/>
        <label>‡πÅ‡∏ó‡∏ô‡πÇ‡∏î‡∏¢: <input type="text" id="replacement" value="${
          current.replacement_name || ""
        }" class="swal2-input"/></label>
        <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: <textarea id="note" class="swal2-textarea">${
          current.note || ""
        }</textarea></label>
      </div>
    `,
      showCancelButton: true,
      confirmButtonText: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
      preConfirm: () => {
        return {
          is_ot: document.getElementById("is_ot").checked,
          replacement_name: document.getElementById("replacement").value,
          note: document.getElementById("note").value,
        };
      },
    }).then((result) => {
      if (!result.isConfirmed) return;

      const newAssignments = { ...assignments };
      if (!newAssignments[nurseId]) newAssignments[nurseId] = {};
      if (!newAssignments[nurseId][day]) newAssignments[nurseId][day] = {};
      if (!newAssignments[nurseId][day][shift])
        newAssignments[nurseId][day][shift] = { value: true };

      newAssignments[nurseId][day][shift] = {
        ...newAssignments[nurseId][day][shift],
        ...result.value,
        value: true,
      };

      setAssignments(
        markHolidaysDisabled(newAssignments, nurseHolidays, year, month)
      );

      toast.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    });
  };
  const exportToExcel = () => {
    // header
    const ws_data = [
      [
        "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
        ...Array.from({ length: daysInMonth }, (_, i) => (i + 1).toString()),
      ],
    ];

    nurseList.forEach((nurse) => {
      const row = [nurse.display_name || nurse.name];
      for (let d = 1; d <= daysInMonth; d++) {
        const dayObj = assignments[nurse.id]?.[d] || {};
        let txt = "";
        if (dayObj.morning?.value) txt += "‡∏ä";
        if (dayObj.evening?.value) txt += "‡∏ö";
        if (dayObj.night?.value) txt += "‡∏î";
        row.push(txt || "-");
      }
      ws_data.push(row);
    });

    const ws = XLSX.utils.aoa_to_sheet(ws_data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£");
    const fileName = `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£_${yearMonth}.xlsx`;
    XLSX.writeFile(wb, fileName);
  };

  return (
    <div className="overflow-auto p-4">
      {/* ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á + ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå admin */}
      <div className="flex flex-wrap items-center justify-between mb-4">
        <h1 className="text-2xl font-bold">üìÖ ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</h1>
        {/* 
        {hospitalId && wardId && (
          <div className="text-sm text-gray-600">
            üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: <strong>{hospitalName}</strong> | üè¨ ‡∏ß‡∏≠‡∏£‡πå‡∏î:{" "}
            <strong>{wardName}</strong>
          </div>
        )} */}

        <div className="flex flex-wrap gap-2 mt-2">
          <Link href="/admin-dashboard">
            <button className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded">
              üõ†Ô∏è ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö
            </button>
          </Link>
          {!currentUser ? (
            <button
              onClick={() => router.push("/login")}
              className="bg-blue-500 text-white px-4 py-2 rounded"
            >
              üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </button>
          ) : (
            <div className="flex items-center gap-4">
              {/* üë§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏∏‡πà‡∏° */}
              <span className="text-white bg-gray-700 px-3 py-1 rounded text-sm">
                ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {currentUser.username}
                {currentUser.user_type ? ` (${currentUser.user_type})` : ""}
              </span>

              {/* üî¥ ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö */}
              <button
                onClick={() => {
                  localStorage.removeItem("logged_in_user");
                  setCurrentUser(null);
                  toast.success("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
                  window.location.href = "/login";
                }}
                className="bg-red-500 text-white px-4 py-2 rounded"
              >
                ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
              </button>
            </div>
          )}
          {/* <button
            onClick={() => {
              setShowReset(false);
              setTimeout(() => {
                window.location.href = "/shift-planner";
              }, 500);
            }}
          >
            üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
          </button> */}
        </div>
      </div>

      {/* ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏µ / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á */}
      <div className="mb-4 flex gap-4 flex-wrap items-center">
        {/* üîò ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
        <select
          className="border p-2"
          value={year}
          onChange={(e) => setYearAndSave(Number(e.target.value))}
        >
          {[...Array(5)].map((_, i) => {
            const y = new Date().getFullYear() + 543 - 2 + i;
            return (
              <option key={y} value={y - 543}>
                {y}
              </option>
            );
          })}
        </select>
        <select
          className="border p-2"
          value={month}
          onChange={(e) => setMonthAndSave(Number(e.target.value))}
        >
          {[
            "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
            "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
            "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
            "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
            "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
            "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
            "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
            "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
            "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
            "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
            "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
            "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
          ].map((name, index) => (
            <option key={index + 1} value={index + 1}>
              {name}
            </option>
          ))}
        </select>

        <>
          {userRole === "admin" ? (
            <select
              className="border p-2"
              value={selectedHospitalId}
              onChange={(e) => {
                console.log("üè• Hospital selected:", e.target.value); // ‚úÖ log
                setSelectedHospitalId(e.target.value);
                setSelectedWardId(""); // reset ‡∏ß‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
              }}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</option>
              {allHospitals.map((h) => (
                <option key={h.id} value={h.id}>
                  {h.name}
                </option>
              ))}
            </select>
          ) : (
            <select className="border p-2" disabled>
              <option value={userHospitalID}>{hospitalName}</option>
            </select>
          )}
          {userRole === "admin" ||
          currentUser?.user_type === "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•" ? (
            <select
              className="border p-2"
              value={selectedWardId}
              onChange={(e) => {
                console.log("üè• Ward selected:", e.target.value); // ‚úÖ log
                setSelectedWardId(e.target.value);
              }}
              disabled={
                userRole === "admin" ? !selectedHospitalId : !userHospitalID
              }
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏≠‡∏£‡πå‡∏î</option>
              {(userRole === "admin"
                ? allWards.filter((w) => w.hospital_id === selectedHospitalId)
                : allWards.filter((w) => w.hospital_id === userHospitalID)
              ).map((w) => (
                <option key={w.id} value={w.id}>
                  {w.name}
                </option>
              ))}
            </select>
          ) : (
            <select className="border p-2" disabled>
              <option value={userShiftWardID}>{wardName}</option>
            </select>
          )}
        </>
        <button
          onClick={() => {
            setCleared(true);
            setEditingPlan(false);
            setAssignments({});
            setPlanId(null);
            setShiftPlanName("");
            // toast.info("üßπ ‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß");
          }}
          className="px-4 py-2 bg-gray-500 text-white rounded mr-2"
        >
          üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
        </button>

        {/* ‚ôªÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ role/admin ‡∏´‡∏£‡∏∑‡∏≠ user_type ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ward ‡πÅ‡∏•‡πâ‡∏ß */}
        {(["admin"].includes(userRole) ||
          ["‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î"].includes(
            currentUser?.user_type
          )) && (
          <>
            <button
              onClick={() => {
                /* ---------- STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô ---------- */
                const isAdmin = userRole === "admin";
                const isHeadNurse = currentUser?.user_type === "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•";

                // (1) admin ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
                if (isAdmin && !selectedHospitalId) {
                  toast.warn("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î ‚Äú‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà‚Äù");
                  return;
                }

                // (2) admin / ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Äú‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ‚Äù
                const wardBelongs =
                  selectedWardId &&
                  allWards.some(
                    (w) =>
                      String(w.id) === String(selectedWardId) &&
                      String(w.hospital_id) ===
                        String(selectedHospitalId || hospitalId)
                  );

                if ((isAdmin || isHeadNurse) && !wardBelongs) {
                  toast.warn("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î ‚Äú‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà‚Äù");
                  return;
                }

                /* ---------- STEP 2: ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á ---------- */
                const hId = isAdmin ? selectedHospitalId : hospitalId;
                const wId = isAdmin || isHeadNurse ? selectedWardId : wardId;

                // ‡∏î‡∏±‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î)
                if (!hId || !wId) {
                  toast.warn("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà");
                  return;
                }

                /* ---------- STEP 3: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£ ---------- */
                setHospitalId(hId);
                setWardId(wId);

                setEditingPlan(true);
                setCleared(false);
                setShiftPlanName("");
                setSummaryText("");
                setAssignments({});
                setPlanId(null);
                setRefPlan(null);
                setStatusMessage("üÜï ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)");

                fetchNurseList(hId, wId); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ï‡∏≤‡∏° ward ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
              }}
              className="bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700"
            >
              ‚ôªÔ∏è ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà
            </button>
          </>
        )}

        {existingPlans.length > 0 && (
          <button
            onClick={async () => {
              const wrapper = document.createElement("div");
              wrapper.style.textAlign = "left";

              existingPlans.forEach((plan) => {
                const container = document.createElement("div");
                container.style.marginBottom = "8px";

                const title = document.createElement("b");
                title.innerText = `üìå ${plan.name}`;
                container.appendChild(title);

                const yearBE = plan.year + 543;
                const month = plan.month;
                const hospitalName = getHospitalName(plan.hospital_id);
                const wardName = getWardName(plan.ward_id);

                const meta = document.createElement("div");
                meta.innerText = `‡∏û.‡∏®. ${yearBE} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${month}, ‡∏£‡∏û. ${hospitalName}, ‡∏ß‡∏≠‡∏£‡πå‡∏î ${wardName}`;
                meta.style.color = "#888";
                meta.style.fontSize = "0.9em";

                container.appendChild(meta);
                container.appendChild(document.createElement("br"));

                const actions = canEdit
                  ? [
                      { label: "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£", action: "edit" },
                      { label: "üìù ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠", action: "rename" },
                      { label: "üóë ‡∏•‡∏ö‡πÄ‡∏ß‡∏£", action: "delete" },
                    ]
                  : [
                      {
                        label: "üëÅ ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£",
                        action: "edit",
                        highlighted: true, // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ style ‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                      },
                    ];

                const buttonRow = document.createElement("div");
                buttonRow.style.display = "flex";
                buttonRow.style.flexWrap = "wrap";
                buttonRow.style.gap = "6px";
                buttonRow.style.marginTop = "4px";

                actions.forEach(({ label, action }) => {
                  const btn = document.createElement("button");
                  btn.textContent = label;

                  btn.className = `px-3 py-1 border border-gray-300 rounded text-sm text-gray-800 hover:text-green-600 bg-white`;

                  btn.onclick = async () => {
                    console.log("üìã plan.hospital_id:", plan.hospital_id);
                    console.log("üìã plan.ward_id:", plan.ward_id);

                    const hId = plan.hospital_id;
                    const wId = plan.ward_id;
                    const y = plan.year;
                    const m = plan.month;

                    if (!hId || !wId) {
                      toast.error("‚ùóÔ∏è‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ hospital_id ‡∏´‡∏£‡∏∑‡∏≠ ward_id");
                      return;
                    }

                    const hospital = allHospitals.find((h) => h.id === hId);
                    const ward = allWards.find((w) => w.id === wId);
                    const hospitalName = hospital
                      ? hospital.name
                      : "(‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•)";
                    const wardName = ward ? ward.name : "(‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≠‡∏£‡πå‡∏î)";

                    const notMatch =
                      selectedHospitalId !== hId ||
                      selectedWardId !== wId ||
                      year !== y ||
                      month !== m;

                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ selected ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if (notMatch) {
                      await Swal.fire({
                        icon: "warning",
                        title: "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô",
                        html: `
        <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å <strong>‡∏õ‡∏µ</strong>, <strong>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</strong>, <strong>‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</strong> ‡πÅ‡∏•‡∏∞ <strong>‡∏ß‡∏≠‡∏£‡πå‡∏î</strong> ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
        <p><strong>‡πÅ‡∏ú‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà:</strong></p>
        <ul style="text-align: left;">
          <li>üìÖ ‡∏õ‡∏µ: ${y} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${m}</li>
          <li>üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•: ${hospitalName}</li>
          <li>üõèÔ∏è ‡∏ß‡∏≠‡∏£‡πå‡∏î: ${wardName}</li>
        </ul>
      `,
                      });
                      return;
                    }

                    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏µ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Å‡πà‡∏≠‡∏ô
                    setYear(y);
                    setMonth(m);

                    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
                    setHospitalId(hId);
                    setWardId(wId);
                    setSelectedHospitalId(hId);
                    setSelectedWardId(wId);

                    console.log("‚úÖ setSelectedHospitalId/wardId:", hId, wId);

                    // ‚úÖ ‡∏£‡∏≠ React ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ fetch
                    setTimeout(async () => {
                      const success = await fetchNurseList(hId, wId);
                      if (!success) return;

                      if (action === "edit") {
                        await loadPlanById(plan.id);
                        setCleared(false); // üëà ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
                        setEditingPlan(true);
                        setShiftPlanName(plan.name);
                        setSummaryText(""); // üßº ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£
                        Swal.close();
                      } else if (action === "rename") {
                        const { value: newName } = await Swal.fire({
                          title: "üìù ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£",
                          input: "text",
                          inputValue: plan.name,
                          showCancelButton: true,
                        });
                        if (newName) {
                          await supabase
                            .from("shift_plans")
                            .update({ name: newName })
                            .eq("id", plan.id);
                          toast.success("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß");
                          setExistingPlans((prev) =>
                            prev.map((p) =>
                              p.id === plan.id ? { ...p, name: newName } : p
                            )
                          );
                          Swal.close();
                        }
                      } else if (action === "delete") {
                        const confirm = await Swal.fire({
                          title: "üóë ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£?",
                          text: `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${plan.name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
                          showCancelButton: true,
                          confirmButtonText: "‡∏•‡∏ö",
                        });
                        if (confirm.isConfirmed) {
                          // üî• ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å shift_plans ‡πÅ‡∏•‡∏∞ nurse_shifts
                          await supabase
                            .from("shift_plans")
                            .delete()
                            .eq("id", plan.id);
                          await supabase
                            .from("nurse_shifts")
                            .delete()
                            .eq("plan_id", plan.id);

                          // ‚úÖ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà
                          loadExistingPlans(); // <-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î existingPlans

                          // üîÅ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÑ‡∏õ
                          setRefPlan(null);
                          // setRefAssignments({});

                          // üßº ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          setEditingPlan(false);
                          // üéâ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                          toast.success("üóë ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡πÅ‡∏•‡πâ‡∏ß");

                          // ‚ùå ‡∏õ‡∏¥‡∏î Swal (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà)
                          Swal.close();
                        }
                      }
                    }, 100); // ‚úÖ ‡∏´‡∏ô‡πà‡∏ß‡∏á 100ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ React ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
                  };

                  buttonRow.appendChild(btn);
                });

                container.appendChild(buttonRow); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á container

                wrapper.appendChild(container);
              });

              await Swal.fire({
                title: "üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÄ‡∏Å‡πà‡∏≤",
                html: wrapper,
                showConfirmButton: false,
              });
            }}
            className="bg-violet-500 text-white px-4 py-2 rounded hover:bg-gray-600"
          >
            üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÄ‡∏Å‡πà‡∏≤
          </button>
        )}

        {currentUser &&
          planId &&
          Object.entries(assignments).some(([dateStr, nurseShifts]) => {
            const date = dayjs(dateStr);
            const yearMatch = date.year() === year;
            const monthMatch = date.month() + 1 === month;
            const hasAssignments = Object.keys(nurseShifts).length > 0;
            return yearMatch && monthMatch && hasAssignments;
          }) &&
          hospitalId === DEFAULT_HOSPITAL_ID &&
          wardId === DEFAULT_WARD_ID && ( // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏£‡∏û./‡∏ß‡∏≠‡∏£‡πå‡∏î
            <button
              onClick={() => setShowEditShiftModal(true)}
              className="bg-teal-600 text-white px-4 py-2 rounded hover:bg-teal-700"
            >
              üõ† ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£
            </button>
          )}
      </div>

      {/* üìù ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ nurseList ‡πÅ‡∏•‡πâ‡∏ß */}
      {!cleared && nurseList.length > 0 && (
        <div className="mb-4 flex gap-4 flex-wrap items-center">
          {canEdit && nurseList.length > 0 && (
            <button
              onClick={() => setShowConfirm(true)}
              className="bg-violet-600 text-white px-4 py-2 rounded hover:bg-violet-700"
            >
              üóë ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
          )}

          {(["admin"].includes(userRole) ||
            ["‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î"].includes(
              currentUser?.user_type
            )) &&
            editingPlan && ( // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà
              <button
                onClick={() => {
                  if (!nurseList.length) {
                    toast.error("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏ô‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ");
                    return;
                  }

                  const newAssignments = buildAutoAssignments();
                  setAssignments(
                    markHolidaysDisabled(
                      newAssignments,
                      nurseHolidays,
                      year,
                      month
                    )
                  );

                  /* ---- ‡∏ó‡∏≥‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á/‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å (REST version) ------------------ */
                  const summaryDaily = [];
                  const summaryNurse = [];

                  /* quota/‡∏ß‡∏±‡∏ô */
                  const maxPerShift = {
                    morning: wardConfig?.max_morning_shift_per_day ?? 4,
                    evening: wardConfig?.max_evening_shift_per_day ?? 3,
                    night: wardConfig?.max_night_shift_per_day ?? 3,
                  };

                  let missM = 0,
                    missE = 0,
                    missN = 0;

                  /* ---------- 1) ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ---------- */
                  for (let day = 1; day <= daysInMonth; day++) {
                    const list = { morning: [], evening: [], night: [] };

                    nurseList.forEach((n) => {
                      const d = newAssignments[n.id]?.[day];
                      if (d?.morning?.value) list.morning.push(n.display_name);
                      if (d?.evening?.value) list.evening.push(n.display_name);
                      if (d?.night?.value) list.night.push(n.display_name);
                    });

                    const cM = list.morning.length,
                      cE = list.evening.length,
                      cN = list.night.length;
                    const needM = Math.max(0, maxPerShift.morning - cM);
                    const needE = Math.max(0, maxPerShift.evening - cE);
                    const needN = Math.max(0, maxPerShift.night - cN);

                    missM += needM;
                    missE += needE;
                    missN += needN;

                    const dateStr = `${year}-${String(month).padStart(
                      2,
                      "0"
                    )}-${String(day).padStart(2, "0")}`;
                    summaryDaily.push(
                      `üìÖ ${dateStr}
- ‡πÄ‡∏ä‡πâ‡∏≤  (${cM}/${maxPerShift.morning})${needM ? ` ‡∏Ç‡∏≤‡∏î ${needM}` : ""}: ${
                        cM ? list.morning.join(", ") : "-"
                      }
- ‡∏ö‡πà‡∏≤‡∏¢ (${cE}/${maxPerShift.evening})${needE ? ` ‡∏Ç‡∏≤‡∏î ${needE}` : ""}: ${
                        cE ? list.evening.join(", ") : "-"
                      }
- ‡∏î‡∏∂‡∏Å  (${cN}/${maxPerShift.night})${needN ? ` ‡∏Ç‡∏≤‡∏î ${needN}` : ""}: ${
                        cN ? list.night.join(", ") : "-"
                      }`
                    );
                  }

                  /* ---------- 2) ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ---------- */
                  nurseList.forEach((n) => {
                    let m = 0,
                      e = 0,
                      ni = 0;
                    for (let d = 1; d <= daysInMonth; d++) {
                      const a = newAssignments[n.id]?.[d] || {};
                      if (a.morning?.value) m++;
                      if (a.evening?.value) e++;
                      if (a.night?.value) ni++;
                    }
                    const rest = daysInMonth - (m + e + ni);
                    summaryNurse.push(
                      `- ${n.display_name}: ‡πÄ‡∏ä‡πâ‡∏≤ ${m} | ‡∏ö‡πà‡∏≤‡∏¢ ${e} | ‡∏î‡∏∂‡∏Å ${ni} | ‡∏û‡∏±‡∏Å ${rest}`
                    );
                  });

                  /* ---------- 3) ‡∏£‡∏ß‡∏° & ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ state ---------- */
                  const missingLines = [];
                  if (missM) missingLines.push(`- ‡πÄ‡∏ä‡πâ‡∏≤  : ${missM} ‡πÄ‡∏ß‡∏£`);
                  if (missE) missingLines.push(`- ‡∏ö‡πà‡∏≤‡∏¢ : ${missE} ‡πÄ‡∏ß‡∏£`);
                  if (missN) missingLines.push(`- ‡∏î‡∏∂‡∏Å  : ${missN} ‡πÄ‡∏ß‡∏£`);

                  setSummaryText(
                    summaryDaily.join("\n\n") +
                      `\n\nüë©‚Äç‚öïÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (${nurseList.length} ‡∏Ñ‡∏ô)\n` +
                      summaryNurse.join("\n") +
                      (missingLines.length
                        ? `\n\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î\n${missingLines.join("\n")}`
                        : "") // ‚Üê ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏î‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
                  );
                  setStatusMessage("‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
                  /* --------------------------------------------------------------- */
                }}
                className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700 ml-2"
              >
                ü§ñüé≤ 1. ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ü™Ñüß†
                <span className="block text-xs mt-1 text-indigo-200 font-normal">
                  (‡∏ä,‡∏ä,‡∏û‡∏±‡∏Å,‡∏û‡∏±‡∏Å,‡∏ö,‡∏ö,‡∏î,‡∏î,‡∏û‡∏±‡∏Å,‡∏û‡∏±‡∏Å)
                </span>
              </button>
            )}

          {(["admin"].includes(userRole) ||
            ["‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î"].includes(
              currentUser?.user_type
            )) &&
            editingPlan && (
              <button
                onClick={() => {
                  if (!nurseList.length) {
                    toast.error("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏ô‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ");
                    return;
                  }

                  // ‡∏õ‡∏∏‡πà‡∏° 2: ‡πÄ‡∏ß‡πâ‡∏ô 2 ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                  const newAssignments = assignEqualShift(2);
                  setAssignments(
                    markHolidaysDisabled(
                      mergeAssignmentsPreserveDays(
                        assignments,
                        newAssignments,
                        [1, 2]
                      ),
                      nurseHolidays,
                      year,
                      month
                    )
                  );

                  // ---- ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° 1 ----
                  const summaryDaily = [];
                  const summaryNurse = [];
                  let missM = 0,
                    missE = 0,
                    missN = 0;

                  const maxPerShift = {
                    morning: wardConfig?.max_morning_shift_per_day ?? 4,
                    evening: wardConfig?.max_evening_shift_per_day ?? 3,
                    night: wardConfig?.max_night_shift_per_day ?? 3,
                  };

                  for (let day = 1; day <= daysInMonth; day++) {
                    const list = { morning: [], evening: [], night: [] };

                    nurseList.forEach((n) => {
                      const d = newAssignments[n.id]?.[day];
                      if (d?.morning?.value) list.morning.push(n.display_name);
                      if (d?.evening?.value) list.evening.push(n.display_name);
                      if (d?.night?.value) list.night.push(n.display_name);
                    });

                    const cM = list.morning.length,
                      cE = list.evening.length,
                      cN = list.night.length;
                    const needM = Math.max(0, maxPerShift.morning - cM);
                    const needE = Math.max(0, maxPerShift.evening - cE);
                    const needN = Math.max(0, maxPerShift.night - cN);

                    missM += needM;
                    missE += needE;
                    missN += needN;

                    const dateStr = `${year}-${String(month).padStart(
                      2,
                      "0"
                    )}-${String(day).padStart(2, "0")}`;
                    summaryDaily.push(
                      `üìÖ ${dateStr}
- ‡πÄ‡∏ä‡πâ‡∏≤  (${cM}/${maxPerShift.morning})${needM ? ` ‡∏Ç‡∏≤‡∏î ${needM}` : ""}: ${
                        cM ? list.morning.join(", ") : "-"
                      }
- ‡∏ö‡πà‡∏≤‡∏¢ (${cE}/${maxPerShift.evening})${needE ? ` ‡∏Ç‡∏≤‡∏î ${needE}` : ""}: ${
                        cE ? list.evening.join(", ") : "-"
                      }
- ‡∏î‡∏∂‡∏Å  (${cN}/${maxPerShift.night})${needN ? ` ‡∏Ç‡∏≤‡∏î ${needN}` : ""}: ${
                        cN ? list.night.join(", ") : "-"
                      }`
                    );
                  }

                  nurseList.forEach((n) => {
                    let m = 0,
                      e = 0,
                      ni = 0;
                    for (let d = 1; d <= daysInMonth; d++) {
                      const a = newAssignments[n.id]?.[d] || {};
                      if (a.morning?.value) m++;
                      if (a.evening?.value) e++;
                      if (a.night?.value) ni++;
                    }
                    const rest = daysInMonth - (m + e + ni);
                    summaryNurse.push(
                      `- ${n.display_name}: ‡πÄ‡∏ä‡πâ‡∏≤ ${m} | ‡∏ö‡πà‡∏≤‡∏¢ ${e} | ‡∏î‡∏∂‡∏Å ${ni} | ‡∏û‡∏±‡∏Å ${rest}`
                    );
                  });

                  const missingLines = [];
                  if (missM) missingLines.push(`- ‡πÄ‡∏ä‡πâ‡∏≤  : ${missM} ‡πÄ‡∏ß‡∏£`);
                  if (missE) missingLines.push(`- ‡∏ö‡πà‡∏≤‡∏¢ : ${missE} ‡πÄ‡∏ß‡∏£`);
                  if (missN) missingLines.push(`- ‡∏î‡∏∂‡∏Å  : ${missN} ‡πÄ‡∏ß‡∏£`);

                  setSummaryText(
                    summaryDaily.join("\n\n") +
                      `\n\nüë©‚Äç‚öïÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (${nurseList.length} ‡∏Ñ‡∏ô)\n` +
                      summaryNurse.join("\n") +
                      (missingLines.length
                        ? `\n\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î\n${missingLines.join("\n")}`
                        : "")
                  );
                  setStatusMessage(
                    `‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏™‡∏∏‡πà‡∏°‡∏ß‡∏ô quota ‡πÄ‡∏ß‡πâ‡∏ô 2 ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å) ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß`
                  );
                }}
                className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-700 ml-2"
              >
                ü§ñüßÆ 2. ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏°)
                <span className="block text-xs mt-1 text-yellow-200 font-normal">
                  ‡πÄ‡∏ß‡πâ‡∏ô 2 ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                </span>
              </button>
            )}

          {(["admin"].includes(userRole) ||
            ["‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏î"].includes(
              currentUser?.user_type
            )) &&
            editingPlan && (
              <button
                onClick={() => {
                  if (!nurseList.length) {
                    toast.error("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏ô‡∏ß‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ");
                    return;
                  }

                  // ‡∏õ‡∏∏‡πà‡∏° 3: ‡πÅ‡∏à‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
                  const newAssignments = assignEqualShift(0);

                  setAssignments(
                    markHolidaysDisabled(
                      newAssignments,
                      nurseHolidays,
                      year,
                      month
                    )
                  );

                  // ---- ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° 1 ----
                  const summaryDaily = [];
                  const summaryNurse = [];
                  let missM = 0,
                    missE = 0,
                    missN = 0;

                  const maxPerShift = {
                    morning: wardConfig?.max_morning_shift_per_day ?? 4,
                    evening: wardConfig?.max_evening_shift_per_day ?? 3,
                    night: wardConfig?.max_night_shift_per_day ?? 3,
                  };

                  for (let day = 1; day <= daysInMonth; day++) {
                    const list = { morning: [], evening: [], night: [] };

                    nurseList.forEach((n) => {
                      const d = newAssignments[n.id]?.[day];
                      if (d?.morning?.value) list.morning.push(n.display_name);
                      if (d?.evening?.value) list.evening.push(n.display_name);
                      if (d?.night?.value) list.night.push(n.display_name);
                    });

                    const cM = list.morning.length,
                      cE = list.evening.length,
                      cN = list.night.length;
                    const needM = Math.max(0, maxPerShift.morning - cM);
                    const needE = Math.max(0, maxPerShift.evening - cE);
                    const needN = Math.max(0, maxPerShift.night - cN);

                    missM += needM;
                    missE += needE;
                    missN += needN;

                    const dateStr = `${year}-${String(month).padStart(
                      2,
                      "0"
                    )}-${String(day).padStart(2, "0")}`;
                    summaryDaily.push(
                      `üìÖ ${dateStr}
- ‡πÄ‡∏ä‡πâ‡∏≤  (${cM}/${maxPerShift.morning})${needM ? ` ‡∏Ç‡∏≤‡∏î ${needM}` : ""}: ${
                        cM ? list.morning.join(", ") : "-"
                      }
- ‡∏ö‡πà‡∏≤‡∏¢ (${cE}/${maxPerShift.evening})${needE ? ` ‡∏Ç‡∏≤‡∏î ${needE}` : ""}: ${
                        cE ? list.evening.join(", ") : "-"
                      }
- ‡∏î‡∏∂‡∏Å  (${cN}/${maxPerShift.night})${needN ? ` ‡∏Ç‡∏≤‡∏î ${needN}` : ""}: ${
                        cN ? list.night.join(", ") : "-"
                      }`
                    );
                  }

                  nurseList.forEach((n) => {
                    let m = 0,
                      e = 0,
                      ni = 0;
                    for (let d = 1; d <= daysInMonth; d++) {
                      const a = newAssignments[n.id]?.[d] || {};
                      if (a.morning?.value) m++;
                      if (a.evening?.value) e++;
                      if (a.night?.value) ni++;
                    }
                    const rest = daysInMonth - (m + e + ni);
                    summaryNurse.push(
                      `- ${n.display_name}: ‡πÄ‡∏ä‡πâ‡∏≤ ${m} | ‡∏ö‡πà‡∏≤‡∏¢ ${e} | ‡∏î‡∏∂‡∏Å ${ni} | ‡∏û‡∏±‡∏Å ${rest}`
                    );
                  });

                  const missingLines = [];
                  if (missM) missingLines.push(`- ‡πÄ‡∏ä‡πâ‡∏≤  : ${missM} ‡πÄ‡∏ß‡∏£`);
                  if (missE) missingLines.push(`- ‡∏ö‡πà‡∏≤‡∏¢ : ${missE} ‡πÄ‡∏ß‡∏£`);
                  if (missN) missingLines.push(`- ‡∏î‡∏∂‡∏Å  : ${missN} ‡πÄ‡∏ß‡∏£`);

                  setSummaryText(
                    summaryDaily.join("\n\n") +
                      `\n\nüë©‚Äç‚öïÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (${nurseList.length} ‡∏Ñ‡∏ô)\n` +
                      summaryNurse.join("\n") +
                      (missingLines.length
                        ? `\n\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î\n${missingLines.join("\n")}`
                        : "")
                  );
                  setStatusMessage(
                    `‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏™‡∏∏‡πà‡∏°‡∏ß‡∏ô quota ‡πÅ‡∏à‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô) ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß`
                  );
                }}
                className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-700 ml-2"
              >
                ü§ñüßÆ 3. ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏°)
                <span className="block text-xs mt-1 text-yellow-200 font-normal">
                  ‡∏à‡∏±‡∏î‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
                </span>
              </button>
            )}
          {canEdit && editingPlan && Object.keys(assignments).length > 0 && (
            <>
              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏°‡∏µ planId (‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡πÅ‡∏ú‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà) */}
              {planId && (
                <button
                  onClick={saveToExistingPlan}
                  className="px-4 py-2 bg-green-700 text-white rounded"
                >
                  üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏°
                </button>
              )}

              {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà */}
              <button
                onClick={async () => {
                  const { value: newName } = await Swal.fire({
                    title: "üìÑ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà",
                    input: "text",
                    inputValue: shiftPlanName,
                    inputPlaceholder: "‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ß‡∏£‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
                    showCancelButton: true,
                    confirmButtonText: "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                    inputValidator: (value) => !value.trim() && "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠",
                  });

                  if (!newName) return;

                  const trimmedName = newName.trim();

                  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
                  const { data: existing, error: checkError } = await supabase
                    .from("shift_plans")
                    .select("id")
                    .eq("hospital_id", hospitalId)
                    .eq("ward_id", wardId)
                    .eq("name", trimmedName)
                    .eq("year", year)
                    .eq("month", month);

                  if (checkError) {
                    toast.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠");
                    return;
                  }

                  if (existing && existing.length > 0) {
                    Swal.fire(
                      "‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥",
                      "‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏£‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß",
                      "warning"
                    );
                    return;
                  }

                  try {
                    setShiftPlanName(trimmedName);
                    setEditingPlan(false);

                    // üîΩ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    const result = await saveToSupabase(trimmedName); // üëà ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÉ‡∏´‡πâ saveToSupabase

                    if (result?.error) {
                      if (
                        result.error.message.includes("duplicate key") ||
                        result.error.message.includes("unique_nurse_shift")
                      ) {
                        toast.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô");
                      } else {
                        toast.error(
                          "‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + result.error.message
                        );
                      }
                    } else {
                      // toast.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
                      await fetchExistingPlans(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà
                      setRefPlan(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå refPlan ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ú‡∏ô‡πÉ‡∏´‡∏°‡πà
                      setEditingPlan(false);
                    }
                  } catch (e) {
                    toast.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + e.message);
                  }
                }}
                className={`px-4 py-2 rounded ${
                  !editingPlan || Object.keys(assignments).length === 0
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-blue-600 text-white"
                }`}
              >
                üÜï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà
              </button>
              <button
                onClick={exportToExcel}
                className="bg-green-600 text-white px-4 py-1 rounded ml-2"
              >
                üì• Export Excel
              </button>
            </>
          )}
        </div>
      )}

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• */}
      {!cleared && (
        <table className="table-auto border-collapse">
          <thead>
            <tr>
              <th className="border px-2 py-1 bg-gray-200 text-black sticky left-0 z-10">
                üë©‚Äç‚öïÔ∏è ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
              </th>
              {Array.from({ length: daysInMonth }, (_, i) => (
                <th key={i} className="border px-2 py-1 bg-gray-100 text-black">
                  {i + 1}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {nurseList.map((nurse, rowIndex) => (
              <tr key={rowIndex}>
                <td className="border px-2 py-1 sticky left-0 bg-white text-black z-10">
                  {nurse.display_name || nurseMap[nurse.id] || nurse.name}
                </td>

                {Array.from({ length: daysInMonth }, (_, dayIndex) => {
                  const day = dayIndex + 1;
                  const dateKey = `${yearMonth}-${day
                    .toString()
                    .padStart(2, "0")}`;
                  const weekday = dayjs(dateKey).day();
                  const isSaturday = weekday === 6;
                  const isSunday = weekday === 0;
                  const isPersonalHoliday =
                    (nurseHolidays?.[nurse.id] &&
                      (nurseHolidays[nurse.id] instanceof Set
                        ? nurseHolidays[nurse.id].has(dateKey)
                        : Array.isArray(nurseHolidays[nurse.id])
                        ? nurseHolidays[nurse.id].includes(dateKey)
                        : false)) ||
                    false;

                  if (isPersonalHoliday) {
                    console.log(
                      `[LOG] [Render] Cell ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡∏£: ${
                        nurse.display_name || nurse.name || nurse.id
                      } | ‡∏ß‡∏±‡∏ô‡∏•‡∏≤: ${dateKey}`
                    );
                  }

                  if (isPersonalHoliday) {
                    const nurseName =
                      nurse.display_name || nurse.name || nurse.id;
                    console.log(
                      `[LOG] [Render] ‡∏õ‡∏¥‡∏î cell: ${nurseName} | ‡∏ß‡∏±‡∏ô‡∏•‡∏≤: ${dateKey}`
                    );
                  }

                  const isWeekend = isSaturday || isSunday;
                  const isBlockedByWeekendRule =
                    isWeekend && nurse.allow_weekend === false;

                  return (
                    <td
                      key={dayIndex}
                      className={`border px-1 py-1 text-center text-sm min-w-[36px] ${
                        isPersonalHoliday
                          ? "bg-red-100 text-gray-400 cursor-not-allowed"
                          : isSaturday
                          ? "bg-violet-200"
                          : isSunday
                          ? "bg-violet-300"
                          : ""
                      }`}
                    >
                      {shifts.map((shift) => {
                        const dayObj = assignments[nurse.id]?.[day] || {};
                        const isAssigned = dayObj?.[shift]?.value === true;
                        const isShiftNotAllowed =
                          nurse[`allow_${shift}`] === false;
                        // **Fix: ‡∏ß‡∏±‡∏ô‡∏•‡∏≤ = disabled ‡∏ó‡∏∏‡∏Å shift**
                        const isHolidayShift =
                          isPersonalHoliday || dayObj?.[shift]?.disabled;
                        const isBlockedShift =
                          isHolidayShift ||
                          isBlockedByWeekendRule ||
                          isShiftNotAllowed;

                        const bgColor = isBlockedShift
                          ? "bg-gray-300 text-gray-400 cursor-not-allowed"
                          : isAssigned
                          ? shift === "morning"
                            ? "bg-blue-300"
                            : shift === "evening"
                            ? "bg-orange-300"
                            : "bg-purple-300"
                          : "bg-gray-100";

                        let tooltip = "";
                        if (isHolidayShift)
                          tooltip = dayObj?.[shift]?.reason || "‡∏•‡∏≤‡∏á‡∏≤‡∏ô";
                        else if (isBlockedByWeekendRule)
                          tooltip = "‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î";
                        else if (isShiftNotAllowed)
                          tooltip = "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ß‡∏£‡∏ô‡∏µ‡πâ";

                        return (
                          <div
                            key={shift}
                            onClick={() => {
                              // üö´ ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏•‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ disabled = ‡∏´‡πâ‡∏≤‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î
                              if (isHolidayShift) {
                                console.log(
                                  `[LOG] [CLICK BLOCKED] ‡∏Ñ‡∏•‡∏¥‡∏Å cell ‡∏ß‡∏±‡∏ô‡∏•‡∏≤: ${
                                    nurse.display_name || nurse.name || nurse.id
                                  }, ${dateKey}, shift=${shift}`
                                );
                                toast.warn(
                                  `‚õî ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ (${day}/${month}) ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏•‡∏≤‡∏á‡∏≤‡∏ô`
                                );
                                return;
                              }
                              if (!canEdit) return;
                              if (isBlockedShift) return;
                              toggleShift(nurse, day, shift);
                            }}
                            className={`text-sm rounded px-1 mb-0.5 ${bgColor} ${
                              canEdit && !isBlockedShift && !isHolidayShift
                                ? "cursor-pointer"
                                : "cursor-not-allowed"
                            }`}
                            title={tooltip}
                          >
                            {isAssigned ? (
                              <div className="flex items-center justify-between gap-1">
                                <span className="text-black">
                                  {shiftLabels[shift]}
                                </span>
                                <button
                                  className="text-xs text-gray-600 hover:text-blue-700"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    openEditShiftModal(
                                      nurse.id,
                                      dateKey,
                                      shift
                                    );
                                  }}
                                  title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£"
                                >
                                  ‚úèÔ∏è
                                </button>
                              </div>
                            ) : (
                              <span className="text-black">
                                {shiftLabels[shift]}
                              </span>
                            )}
                          </div>
                        );
                      })}
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
        </table>
      )}
      {summaryText && (
        <div className="mt-6 bg-gray-100 p-4 rounded border text-sm text-black max-w-[500px] mx-auto">
          <details>
            <summary className="cursor-pointer font-semibold">
              üìã ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏£‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
            </summary>
            <div className="mt-2">
              <pre className="whitespace-pre-wrap">{summaryText}</pre>
              <button
                className="mt-2 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded"
                onClick={() => {
                  navigator.clipboard.writeText(summaryText);
                  toast.success("üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
                }}
              >
                üìé ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
              </button>
            </div>
          </details>
        </div>
      )}

      <br />
      {/* ‚úÖ Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô */}
      {showConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded shadow-lg max-w-sm w-full">
            <h2 className="text-lg font-bold mb-4 text-red-600">
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </h2>
            <p className="mb-6 text-sm text-black">
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ? <br />
              (‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
            </p>
            <div className="flex justify-end gap-2">
              <button
                onClick={() => setShowConfirm(false)}
                className="px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                onClick={handleConfirmClear}
                className="px-4 py-2 bg-red-600 text-white hover:bg-red-700 rounded"
              >
                üóë ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}

      {!cleared && statusMessage && (
        <div className="mb-4 text-sm text-white bg-gray-800 p-2 rounded">
          {statusMessage}
        </div>
      )}

      {showEditShiftModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white max-w-3xl w-full p-6 rounded shadow-lg overflow-y-auto max-h-[80vh]">
            <h2 className="text-xl font-bold text-black mb-4">
              üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡∏£
            </h2>
            <table className="w-full table-auto border-collapse mb-4 text-sm">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border text-black px-2 py-1">üë©‚Äç‚öïÔ∏è ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</th>
                  <th className="border text-black px-2 py-1">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                  <th className="border text-black px-2 py-1">‚è∞ ‡πÄ‡∏ß‡∏£</th>
                  <th className="border text-black px-2 py-1">üõ† ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(assignments).flatMap(([shift_date, nurses]) =>
                  Object.entries(nurses).flatMap(([nurse_id, shiftArray]) =>
                    Array.isArray(shiftArray)
                      ? shiftArray.map((shiftInfo, idx) => {
                          const shift_id = shiftInfo.id;
                          const shift_type = shiftInfo.type;

                          return (
                            <tr
                              key={
                                shift_id || `${nurse_id}-${shift_type}-${idx}`
                              }
                            >
                              <td className="border text-black px-2 py-1">
                                {nurseMap[nurse_id] || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"}
                              </td>
                              <td className="border text-black px-2 py-1">
                                {shift_date}
                              </td>
                              <td className="border text-black px-2 py-1">
                                {shiftLabels[shift_type] || shift_type}
                              </td>
                              <td className="border text-black px-2 py-1 text-center">
                                <button
                                  onClick={() => {
                                    if (shift_id) {
                                      openEditShiftFromDatabase(shift_id);
                                    } else {
                                      openEditShiftFromAssignments({
                                        date: shift_date,
                                        nurseId: nurse_id,
                                        shiftType: shift_type,
                                      });
                                    }
                                  }}
                                  className="text-blue-600 hover:underline"
                                >
                                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                </button>
                              </td>
                            </tr>
                          );
                        })
                      : []
                  )
                )}
              </tbody>
            </table>

            <div className="text-right">
              <button
                onClick={() => setShowEditShiftModal(false)}
                className="bg-gray-500 text-white px-4 py-2 rounded"
              >
                ‚ùå ‡∏õ‡∏¥‡∏î
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default NoSSR(ShiftPlanner);
